{"ast":null,"code":"import _regeneratorRuntime from\"/Users/shariati/Desktop/Projects/demo2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/shariati/Desktop/Projects/demo2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"/Users/shariati/Desktop/Projects/demo2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/shariati/Desktop/Projects/demo2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _assertThisInitialized from\"/Users/shariati/Desktop/Projects/demo2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";import _createSuper from\"/Users/shariati/Desktop/Projects/demo2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import _inherits from\"/Users/shariati/Desktop/Projects/demo2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Axios from'axios';import{Container,Row,Col,Table,Form,Card,Button}from'react-bootstrap';import NumberFormat from'react-number-format';import{AreaChart,XAxis,YAxis,CartesianGrid,Tooltip,Legend,Area}from'recharts';import ReactGA from'react-ga';import Loading from'./loading';var colors={confirmed:'#FFD31D',recovered:'#21BF72',deaths:'#DD2C00'};var showChartPeriod=[{period:0,periodTitle:\"All Data\"},{period:7,periodTitle:\"Last 7 Days\"},{period:14,periodTitle:\"Last 14 Days\"},{period:30,periodTitle:\"Last 30 Days\"}];var DataChartOnly=/*#__PURE__*/function(_Component){_inherits(DataChartOnly,_Component);var _super=_createSuper(DataChartOnly);function DataChartOnly(props){var _this;_classCallCheck(this,DataChartOnly);_this=_super.call(this,props);_this.state={loading:true,currentData:[],currentPage:1,dataPerPage:7,selectedCountry:\"China\",population:0,temp:[],countries:[],tableCountries:[],chartPeriod:7,width:window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth,chartPeriodSelected:7,totalConfirmed:0,totalRecovered:0,totalDeaths:0};_this.updateDimensions=function(){var width=window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth;_this.setState({width:width});};_this.getData=_this.getData.bind(_assertThisInitialized(_this));_this.getCountry=_this.getCountry.bind(_assertThisInitialized(_this));_this.updateChartPeriod=_this.updateChartPeriod.bind(_assertThisInitialized(_this));return _this;}_createClass(DataChartOnly,[{key:\"componentDidMount\",value:function componentDidMount(){ReactGA.initialize('UA-163115935-1');ReactGA.pageview('/Data-Visualization');this.getCountryByIP();window.addEventListener('resize',this.updateDimensions);}},{key:\"getCountryByIP\",value:function(){var _getCountryByIP=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var res;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return Axios.get(\"https://ipapi.co/json\");case 2:res=_context.sent;this.setState({selectedCountry:res.data.country_name===\"United States\"?\"US\":res.data.country_name,population:res.data.country_population});this.getData();case 5:case\"end\":return _context.stop();}}},_callee,this);}));function getCountryByIP(){return _getCountryByIP.apply(this,arguments);}return getCountryByIP;}()},{key:\"getData\",value:function(){var _getData=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var selectedCountry,res,byConfirmed,totalConfirmed,totalRecovered,totalDeaths,indexOfLastData,indexOfFirstData;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:selectedCountry=this.state.selectedCountry;_context2.next=3;return Axios.get(\"https://pomber.github.io/covid19/timeseries.json\");case 3:res=_context2.sent;byConfirmed=res.data[selectedCountry];byConfirmed.sort(function(a,b){return a.confirmed-b.confirmed;});totalConfirmed=byConfirmed[byConfirmed.length-1].confirmed;totalRecovered=byConfirmed[byConfirmed.length-1].recovered;totalDeaths=byConfirmed[byConfirmed.length-1].deaths;//console.log(totalConfirmed);\nindexOfLastData=res.data[selectedCountry].length;indexOfFirstData=indexOfLastData-this.state.chartPeriod;//console.log(showChartPeriod);\nthis.setState({loading:false,countries:res.data[selectedCountry].slice(indexOfFirstData,indexOfLastData),tableCountries:byConfirmed,temp:Object.keys(res.data),totalConfirmed:totalConfirmed,totalRecovered:totalRecovered,totalDeaths:totalDeaths});case 12:case\"end\":return _context2.stop();}}},_callee2,this);}));function getData(){return _getData.apply(this,arguments);}return getData;}()},{key:\"getCountry\",value:function(){var _getCountry=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(event){var countryRes,searchCountry,byConfirmed,totalConfirmed,totalRecovered,totalDeaths,indexOfLastData,indexOfFirstData;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:event.persist();_context3.next=3;return Axios.get(\"https://pomber.github.io/covid19/timeseries.json\");case 3:countryRes=_context3.sent;searchCountry=event.target.value;byConfirmed=countryRes.data[searchCountry].slice(0);byConfirmed.sort(function(a,b){return a.confirmed-b.confirmed;});totalConfirmed=byConfirmed[byConfirmed.length-1].confirmed;totalRecovered=byConfirmed[byConfirmed.length-1].recovered;totalDeaths=byConfirmed[byConfirmed.length-1].deaths;indexOfLastData=countryRes.data[searchCountry].length;indexOfFirstData=indexOfLastData-this.state.chartPeriod;this.setState({loading:false,selectedCountry:searchCountry,countries:countryRes.data[searchCountry].slice(indexOfFirstData,indexOfLastData),tableCountries:byConfirmed,totalConfirmed:totalConfirmed,totalRecovered:totalRecovered,totalDeaths:totalDeaths});case 13:case\"end\":return _context3.stop();}}},_callee3,this);}));function getCountry(_x){return _getCountry.apply(this,arguments);}return getCountry;}()},{key:\"updateChartPeriod\",value:function(){var _updateChartPeriod=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(props){var countryRes,byConfirmed,indexOfLastData,indexOfFirstData,countries;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.next=2;return Axios.get(\"https://pomber.github.io/covid19/timeseries.json\");case 2:countryRes=_context4.sent;//console.log(countryRes.data[this.state.selectedCountry]);\nbyConfirmed=countryRes.data[this.state.selectedCountry].slice(0);byConfirmed.sort(function(a,b){return b.confirmed-a.confirmed;});indexOfLastData=countryRes.data[this.state.selectedCountry].length;indexOfFirstData=indexOfLastData-props;countries=props===0?countryRes.data[this.state.selectedCountry]:countryRes.data[this.state.selectedCountry].slice(indexOfFirstData,indexOfLastData);this.setState({loading:false,countries:countries,chartPeriodSelected:props});//console.log(event.target.value);\ncase 9:case\"end\":return _context4.stop();}}},_callee4,this);}));function updateChartPeriod(_x2){return _updateChartPeriod.apply(this,arguments);}return updateChartPeriod;}()},{key:\"render\",value:function render(){var _this2=this;var _this$state=this.state,selectedCountry=_this$state.selectedCountry,population=_this$state.population,temp=_this$state.temp,countries=_this$state.countries,width=_this$state.width,chartPeriodSelected=_this$state.chartPeriodSelected,totalConfirmed=_this$state.totalConfirmed,totalRecovered=_this$state.totalRecovered,totalDeaths=_this$state.totalDeaths;var loading=this.state.loading;if(loading)return/*#__PURE__*/React.createElement(Loading,null);return/*#__PURE__*/React.createElement(\"div\",{className:\"mid\"},/*#__PURE__*/React.createElement(Container,{fluid:true},/*#__PURE__*/React.createElement(Row,{className:\"justify-content-md-center\"},/*#__PURE__*/React.createElement(Col,{xs:\"12\",lg:\"8\"},/*#__PURE__*/React.createElement(Card,{className:\"shadow-sm\",style:{marginBottom:'1rem',padding:'1rem',border:'none'}},/*#__PURE__*/React.createElement(Form.Control,{as:\"select\",size:\"sm\",onChange:this.getCountry,custom:true},/*#__PURE__*/React.createElement(\"option\",null,selectedCountry),temp.map(function(items,i){return/*#__PURE__*/React.createElement(\"option\",{key:i},items);}))))),/*#__PURE__*/React.createElement(Row,{className:\"justify-content-md-center\",style:{marginBottom:\"1rem\"}},/*#__PURE__*/React.createElement(Col,{xs:true,lg:\"8\"},showChartPeriod.map(function(period,index){return/*#__PURE__*/React.createElement(Button,{key:index,variant:\"primary\",size:\"sm\",style:{margin:\"0.1rem\"},onClick:function onClick(){return _this2.updateChartPeriod(period.period);}},period.periodTitle);})))),/*#__PURE__*/React.createElement(Container,{fluid:true},/*#__PURE__*/React.createElement(Row,{className:\"justify-content-md-center\"},/*#__PURE__*/React.createElement(Col,{xs:true,lg:\"8\"},/*#__PURE__*/React.createElement(Card,{className:\"shadow-sm\",style:{border:'none'}},/*#__PURE__*/React.createElement(\"div\",{style:{marginTop:'1rem'}},/*#__PURE__*/React.createElement(\"h5\",{style:{textAlign:'center'}},selectedCountry,\"'s Data\")),/*#__PURE__*/React.createElement(AreaChart,{width:width>980?1200:width-80,height:300,data:countries,margin:{top:20,right:20,left:20,bottom:20}},/*#__PURE__*/React.createElement(CartesianGrid,{strokeDasharray:\"1 1\"}),/*#__PURE__*/React.createElement(XAxis,{dataKey:\"date\"}),/*#__PURE__*/React.createElement(YAxis,null),/*#__PURE__*/React.createElement(Tooltip,null),/*#__PURE__*/React.createElement(Legend,null),/*#__PURE__*/React.createElement(Area,{type:\"monotone\",dataKey:\"confirmed\",dot:false,stroke:colors.confirmed,fill:colors.confirmed}),/*#__PURE__*/React.createElement(Area,{type:\"monotone\",dataKey:\"recovered\",dot:false,stroke:colors.recovered,fill:colors.recovered}),/*#__PURE__*/React.createElement(Area,{type:\"monotone\",dataKey:\"deaths\",dot:false,stroke:colors.deaths,fill:colors.deaths})))))),/*#__PURE__*/React.createElement(Container,{fluid:true},/*#__PURE__*/React.createElement(Row,{className:\"justify-content-md-center\"},/*#__PURE__*/React.createElement(Col,{xs:true,lg:\"8\"},/*#__PURE__*/React.createElement(Card,{className:\"shadow-sm\",style:{border:'none',marginTop:'1rem'}},/*#__PURE__*/React.createElement(Row,{className:\"justify-content-md-center\"},/*#__PURE__*/React.createElement(Col,null,/*#__PURE__*/React.createElement(AreaChart,{width:width>980?480:width>720?width/2-80:width-80,height:350,data:countries,margin:{top:20,right:20,left:20,bottom:20}},/*#__PURE__*/React.createElement(CartesianGrid,{strokeDasharray:\"1 1\"}),/*#__PURE__*/React.createElement(XAxis,{dataKey:\"date\"}),/*#__PURE__*/React.createElement(YAxis,null),/*#__PURE__*/React.createElement(Tooltip,null),/*#__PURE__*/React.createElement(Legend,null),/*#__PURE__*/React.createElement(Area,{type:\"monotone\",dataKey:\"confirmed\",dot:false,stroke:colors.confirmed,fill:colors.confirmed}))),/*#__PURE__*/React.createElement(Col,{style:{textAlign:'right'}},/*#__PURE__*/React.createElement(\"div\",{style:{marginTop:'2rem',marginRight:'5rem'}},/*#__PURE__*/React.createElement(\"p\",null,\"As of Selected Period available data\"),/*#__PURE__*/React.createElement(\"span\",null,/*#__PURE__*/React.createElement(\"b\",null,\"From ==> \"),\" \",countries&&countries[0]&&countries[0].date),/*#__PURE__*/React.createElement(\"h5\",null,/*#__PURE__*/React.createElement(NumberFormat,{value:countries&&countries[0]&&countries[0].confirmed,displayType:'text',thousandSeparator:true,style:{color:colors.confirmed}})),/*#__PURE__*/React.createElement(\"span\",null,/*#__PURE__*/React.createElement(\"b\",null,\"To ==> \"),\" \",countries&&countries[countries.length-1]&&countries[countries.length-1].date),/*#__PURE__*/React.createElement(\"h5\",null,/*#__PURE__*/React.createElement(NumberFormat,{value:countries&&countries[countries.length-1]&&countries[countries.length-1].confirmed,displayType:'text',thousandSeparator:true,style:{color:colors.confirmed}})),/*#__PURE__*/React.createElement(\"span\",null,/*#__PURE__*/React.createElement(\"b\",null,\"Confirmed Cases Increased by \")),/*#__PURE__*/React.createElement(\"h3\",null,/*#__PURE__*/React.createElement(NumberFormat,{value:(countries&&countries[countries.length-1]&&countries[countries.length-1].confirmed)-(countries&&countries[0]&&countries[0].confirmed),displayType:'text',thousandSeparator:true,style:{color:colors.deaths}})),/*#__PURE__*/React.createElement(\"span\",null,/*#__PURE__*/React.createElement(\"b\",null,\"Daily Average  \")),/*#__PURE__*/React.createElement(\"h5\",null,/*#__PURE__*/React.createElement(NumberFormat,{value:Math.round(((countries&&countries[countries.length-1]&&countries[countries.length-1].confirmed)-(countries&&countries[0]&&countries[0].confirmed))/(chartPeriodSelected===0?countries.length:chartPeriodSelected)),displayType:'text',thousandSeparator:true})),/*#__PURE__*/React.createElement(\"span\",null,/*#__PURE__*/React.createElement(\"b\",null,\"Growth % \")),/*#__PURE__*/React.createElement(\"h5\",null,/*#__PURE__*/React.createElement(NumberFormat,{value:Math.round(((countries&&countries[countries.length-1]&&countries[countries.length-1].confirmed)-(countries&&countries[0]&&countries[0].confirmed))/totalConfirmed*100,2),displayType:'text',thousandSeparator:true,style:{color:colors.deaths}})),/*#__PURE__*/React.createElement(\"p\",null,\"Last \",countries.length,\" days\")))))))),/*#__PURE__*/React.createElement(Container,{fluid:true},/*#__PURE__*/React.createElement(Row,{className:\"justify-content-md-center\"},/*#__PURE__*/React.createElement(Col,{xs:true,lg:\"8\"},/*#__PURE__*/React.createElement(Card,{className:\"shadow-sm\",style:{border:'none',marginTop:'1rem'}},/*#__PURE__*/React.createElement(Row,{className:\"justify-content-md-center\"},/*#__PURE__*/React.createElement(Col,null,/*#__PURE__*/React.createElement(AreaChart,{width:width>980?480:width>720?width/2-80:width-80,height:350,data:countries,margin:{top:20,right:20,left:20,bottom:20}},/*#__PURE__*/React.createElement(CartesianGrid,{strokeDasharray:\"1 1\"}),/*#__PURE__*/React.createElement(XAxis,{dataKey:\"date\"}),/*#__PURE__*/React.createElement(YAxis,null),/*#__PURE__*/React.createElement(Tooltip,null),/*#__PURE__*/React.createElement(Legend,null),/*#__PURE__*/React.createElement(Area,{type:\"monotone\",dataKey:\"recovered\",dot:false,stroke:colors.recovered,fill:colors.recovered}))),/*#__PURE__*/React.createElement(Col,{style:{textAlign:'right'}},/*#__PURE__*/React.createElement(\"div\",{style:{marginTop:'2rem',marginRight:'5rem'}},/*#__PURE__*/React.createElement(\"p\",null,\"As of Selected Period available data\"),/*#__PURE__*/React.createElement(\"span\",null,/*#__PURE__*/React.createElement(\"b\",null,\"From ==> \"),\" \",countries&&countries[0]&&countries[0].date),/*#__PURE__*/React.createElement(\"h5\",null,/*#__PURE__*/React.createElement(NumberFormat,{value:countries&&countries[0]&&countries[0].recovered,displayType:'text',thousandSeparator:true,style:{color:colors.recovered}})),/*#__PURE__*/React.createElement(\"span\",null,/*#__PURE__*/React.createElement(\"b\",null,\"To ==> \"),\" \",countries&&countries[countries.length-1]&&countries[countries.length-1].date),/*#__PURE__*/React.createElement(\"h5\",null,/*#__PURE__*/React.createElement(NumberFormat,{value:countries&&countries[countries.length-1]&&countries[countries.length-1].recovered,displayType:'text',thousandSeparator:true,style:{color:colors.recovered}})),/*#__PURE__*/React.createElement(\"span\",null,/*#__PURE__*/React.createElement(\"b\",null,\"Recovery Cases Increased by \")),/*#__PURE__*/React.createElement(\"h3\",null,/*#__PURE__*/React.createElement(NumberFormat,{value:(countries&&countries[countries.length-1]&&countries[countries.length-1].recovered)-(countries&&countries[0]&&countries[0].recovered),displayType:'text',thousandSeparator:true,style:{color:colors.recovered}})),/*#__PURE__*/React.createElement(\"span\",null,/*#__PURE__*/React.createElement(\"b\",null,\"Daily Average  \")),/*#__PURE__*/React.createElement(\"h5\",null,/*#__PURE__*/React.createElement(NumberFormat,{value:Math.round(((countries&&countries[countries.length-1]&&countries[countries.length-1].recovered)-(countries&&countries[0]&&countries[0].recovered))/(chartPeriodSelected===0?countries.length:chartPeriodSelected)),displayType:'text',thousandSeparator:true})),/*#__PURE__*/React.createElement(\"span\",null,/*#__PURE__*/React.createElement(\"b\",null,\"Growth % \")),/*#__PURE__*/React.createElement(\"h5\",null,/*#__PURE__*/React.createElement(NumberFormat,{value:Math.round(((countries&&countries[countries.length-1]&&countries[countries.length-1].recovered)-(countries&&countries[0]&&countries[0].recovered))/totalRecovered*100,2),displayType:'text',thousandSeparator:true,style:{color:colors.recovered}})),/*#__PURE__*/React.createElement(\"p\",null,\"Last \",countries.length,\" days\")))))))),/*#__PURE__*/React.createElement(Container,{fluid:true},/*#__PURE__*/React.createElement(Row,{className:\"justify-content-md-center\"},/*#__PURE__*/React.createElement(Col,{xs:true,lg:\"8\"},/*#__PURE__*/React.createElement(Card,{className:\"shadow-sm\",style:{border:'none',marginTop:'1rem'}},/*#__PURE__*/React.createElement(Row,{className:\"justify-content-md-center\"},/*#__PURE__*/React.createElement(Col,null,/*#__PURE__*/React.createElement(AreaChart,{width:width>980?480:width>720?width/2-80:width-80,height:350,data:countries,margin:{top:20,right:20,left:20,bottom:20}},/*#__PURE__*/React.createElement(CartesianGrid,{strokeDasharray:\"1 1\"}),/*#__PURE__*/React.createElement(XAxis,{dataKey:\"date\"}),/*#__PURE__*/React.createElement(YAxis,null),/*#__PURE__*/React.createElement(Tooltip,null),/*#__PURE__*/React.createElement(Legend,null),/*#__PURE__*/React.createElement(Area,{type:\"monotone\",dataKey:\"deaths\",dot:false,stroke:colors.deaths,fill:colors.deaths}))),/*#__PURE__*/React.createElement(Col,{style:{textAlign:'right'}},/*#__PURE__*/React.createElement(\"div\",{style:{marginTop:'2rem',marginRight:'5rem'}},/*#__PURE__*/React.createElement(\"p\",null,\"As of Selected Period available data\"),/*#__PURE__*/React.createElement(\"span\",null,/*#__PURE__*/React.createElement(\"b\",null,\"From ==> \"),\" \",countries&&countries[0]&&countries[0].date),/*#__PURE__*/React.createElement(\"h5\",null,/*#__PURE__*/React.createElement(NumberFormat,{value:countries&&countries[0]&&countries[0].dearhs,displayType:'text',thousandSeparator:true,style:{color:colors.deaths}})),/*#__PURE__*/React.createElement(\"span\",null,/*#__PURE__*/React.createElement(\"b\",null,\"To ==> \"),\" \",countries&&countries[countries.length-1]&&countries[countries.length-1].date),/*#__PURE__*/React.createElement(\"h5\",null,/*#__PURE__*/React.createElement(NumberFormat,{value:countries&&countries[countries.length-1]&&countries[countries.length-1].deaths,displayType:'text',thousandSeparator:true,style:{color:colors.deaths}})),/*#__PURE__*/React.createElement(\"span\",null,/*#__PURE__*/React.createElement(\"b\",null,\"Death Cases Increased by \")),/*#__PURE__*/React.createElement(\"h3\",null,/*#__PURE__*/React.createElement(NumberFormat,{value:(countries&&countries[countries.length-1]&&countries[countries.length-1].deaths)-(countries&&countries[0]&&countries[0].deaths),displayType:'text',thousandSeparator:true,style:{color:colors.deaths}})),/*#__PURE__*/React.createElement(\"span\",null,/*#__PURE__*/React.createElement(\"b\",null,\"Daily Average  \")),/*#__PURE__*/React.createElement(\"h5\",null,/*#__PURE__*/React.createElement(NumberFormat,{value:Math.round(((countries&&countries[countries.length-1]&&countries[countries.length-1].deaths)-(countries&&countries[0]&&countries[0].deaths))/(chartPeriodSelected===0?countries.length:chartPeriodSelected)),displayType:'text',thousandSeparator:true})),/*#__PURE__*/React.createElement(\"span\",null,/*#__PURE__*/React.createElement(\"b\",null,\"Growth % \")),/*#__PURE__*/React.createElement(\"h5\",null,/*#__PURE__*/React.createElement(NumberFormat,{value:Math.round(((countries&&countries[countries.length-1]&&countries[countries.length-1].deaths)-(countries&&countries[0]&&countries[0].deaths))/totalDeaths*100,2),displayType:'text',thousandSeparator:true,style:{color:colors.deaths}})),/*#__PURE__*/React.createElement(\"p\",null,\"Last \",countries.length,\" days\")))))))));}}]);return DataChartOnly;}(Component);export default DataChartOnly;","map":{"version":3,"sources":["/Users/shariati/Desktop/Projects/demo2/src/components/dataChartOnly.jsx"],"names":["React","Component","Axios","Container","Row","Col","Table","Form","Card","Button","NumberFormat","AreaChart","XAxis","YAxis","CartesianGrid","Tooltip","Legend","Area","ReactGA","Loading","colors","confirmed","recovered","deaths","showChartPeriod","period","periodTitle","DataChartOnly","props","state","loading","currentData","currentPage","dataPerPage","selectedCountry","population","temp","countries","tableCountries","chartPeriod","width","window","innerWidth","document","documentElement","clientWidth","body","chartPeriodSelected","totalConfirmed","totalRecovered","totalDeaths","updateDimensions","setState","getData","bind","getCountry","updateChartPeriod","initialize","pageview","getCountryByIP","addEventListener","get","res","data","country_name","country_population","byConfirmed","sort","a","b","length","indexOfLastData","indexOfFirstData","slice","Object","keys","event","persist","countryRes","searchCountry","target","value","marginBottom","padding","border","map","items","i","index","margin","marginTop","textAlign","top","right","left","bottom","marginRight","date","color","Math","round","dearhs"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Axios from 'axios';\nimport {Container,Row,Col,Table,Form, Card, Button} from 'react-bootstrap';\nimport NumberFormat from 'react-number-format';\nimport { AreaChart, XAxis,YAxis, CartesianGrid,Tooltip,Legend, Area} from 'recharts';\nimport ReactGA from 'react-ga';\nimport Loading from './loading';\n\nconst colors = {\n    confirmed: '#FFD31D',\n    recovered: '#21BF72',\n    deaths: '#DD2C00',\n  };\n\n  const showChartPeriod=[\n    {\n        period:0,\n        periodTitle:\"All Data\"\n    },\n    {\n        period:7,\n        periodTitle:\"Last 7 Days\"\n    },\n    {\n        period:14,\n        periodTitle:\"Last 14 Days\"\n    },\n    {\n        period:30,\n        periodTitle:\"Last 30 Days\"\n    }\n]\nclass DataChartOnly extends Component{\n    constructor (props){\n        super(props);\n        this.getData=this.getData.bind(this);\n        this.getCountry=this.getCountry.bind(this);\n        this.updateChartPeriod=this.updateChartPeriod.bind(this);\n      }\n      \n      state={\n        loading:true,\n        currentData:[],\n        currentPage:1,\n        dataPerPage:7,\n        selectedCountry:\"China\",\n        population:0,\n        temp:[],\n        countries:[],\n        tableCountries:[],\n        chartPeriod:7,\n        width:\n        window.innerWidth ||\n        document.documentElement.clientWidth ||\n        document.body.clientWidth,\n        chartPeriodSelected:7,\n        totalConfirmed:0,\n        totalRecovered:0,\n        totalDeaths:0\n      }\n      componentDidMount(){\n        \n        ReactGA.initialize('UA-163115935-1');\n        ReactGA.pageview('/Data-Visualization');\n\n        this.getCountryByIP();\n        window.addEventListener('resize',this.updateDimensions);\n      }\n      updateDimensions = ()=>{\n          const width = \n          window.innerWidth ||\n          document.documentElement.clientWidth ||\n          document.body.clientWidth;\n\n          this.setState({width});\n      }\n      async getCountryByIP(){\n          const res=await Axios.get(\"https://ipapi.co/json\");\n          \n          this.setState({\n              selectedCountry:res.data.country_name ===\"United States\" ? \"US\" : res.data.country_name,\n              population:res.data.country_population \n          })\n          this.getData();\n      }\n      async getData(){\n        const selectedCountry=this.state.selectedCountry;\n        const res=await Axios.get(\"https://pomber.github.io/covid19/timeseries.json\");\n        \n        const byConfirmed=res.data[selectedCountry];\n        byConfirmed.sort(function(a,b){\n            return a.confirmed - b.confirmed;\n        });\n        \n        const totalConfirmed=byConfirmed[byConfirmed.length-1].confirmed;\n        const totalRecovered=byConfirmed[byConfirmed.length-1].recovered;\n        const totalDeaths=byConfirmed[byConfirmed.length-1].deaths;\n        \n        //console.log(totalConfirmed);\n        \n        const indexOfLastData =res.data[selectedCountry].length; \n        const indexOfFirstData=indexOfLastData - this.state.chartPeriod;\n        //console.log(showChartPeriod);\n        this.setState({\n            loading:false,\n          countries:res.data[selectedCountry].slice(indexOfFirstData,indexOfLastData),\n          tableCountries:byConfirmed,\n          temp:Object.keys(res.data),\n          totalConfirmed,\n          totalRecovered,\n          totalDeaths\n        })\n      }\n      async getCountry(event){\n        event.persist();\n        const countryRes=await Axios.get(\"https://pomber.github.io/covid19/timeseries.json\");\n        const searchCountry=event.target.value;\n        \n        const byConfirmed=countryRes.data[searchCountry].slice(0);\n        byConfirmed.sort(function(a,b){\n            return a.confirmed - b.confirmed;\n        });\n\n        const totalConfirmed=byConfirmed[byConfirmed.length-1].confirmed;\n        const totalRecovered=byConfirmed[byConfirmed.length-1].recovered;\n        const totalDeaths=byConfirmed[byConfirmed.length-1].deaths;\n\n        const indexOfLastData =countryRes.data[searchCountry].length; \n        const indexOfFirstData=indexOfLastData - this.state.chartPeriod;\n\n        this.setState({\n            loading:false,\n            selectedCountry:searchCountry,\n            countries:countryRes.data[searchCountry].slice(indexOfFirstData,indexOfLastData),\n            tableCountries:byConfirmed,\n            totalConfirmed,\n            totalRecovered,\n            totalDeaths\n        })\n        \n      }\n\n      async updateChartPeriod(props){\n        \n\n        const countryRes=await Axios.get(\"https://pomber.github.io/covid19/timeseries.json\");\n        \n        //console.log(countryRes.data[this.state.selectedCountry]);\n        \n        const byConfirmed=countryRes.data[this.state.selectedCountry].slice(0);\n        byConfirmed.sort(function(a,b){\n            return b.confirmed - a.confirmed;\n        });\n\n        const indexOfLastData =countryRes.data[this.state.selectedCountry].length; \n        const indexOfFirstData=indexOfLastData - props;\n\n        const countries = props === 0 ? \n        countryRes.data[this.state.selectedCountry] : \n        countryRes.data[this.state.selectedCountry].slice(indexOfFirstData,indexOfLastData);\n        \n        this.setState({\n            loading:false,\n            countries,\n            chartPeriodSelected:props\n        })\n        //console.log(event.target.value);\n      }\n    \nrender(){\n    const {\n        selectedCountry,\n        population,\n        temp,\n        countries,\n        width,\n        chartPeriodSelected,\n        totalConfirmed,\n        totalRecovered,\n        totalDeaths\n    } = this.state;\n\n    const loading = this.state.loading;\n    if(loading) return (\n        <Loading />\n    );\n    return(\n        <div className=\"mid\">\n            <Container fluid>\n                <Row className=\"justify-content-md-center\">\n                    <Col xs=\"12\" lg=\"8\">\n                    <Card className=\"shadow-sm\" style={{marginBottom:'1rem',padding:'1rem',border:'none'}}>\n                        <Form.Control as=\"select\" size=\"sm\" onChange={this.getCountry} custom>\n                                <option>{selectedCountry}</option> \n                                {\n                                temp.map((items,i)=>\n                                <option key={i}>{items}</option>  \n                                )\n                                }\n                            </Form.Control>\n                    </Card>     \n                    </Col>\n                </Row>\n\n                <Row className=\"justify-content-md-center\" style={{marginBottom:\"1rem\"}}>\n                    <Col xs lg=\"8\">\n                        {\n                            showChartPeriod.map((period,index)=>\n                                <Button \n                                    key={index} variant=\"primary\"\n                                    size=\"sm\"\n                                    style={{margin:\"0.1rem\"}}\n                                    onClick={()=>this.updateChartPeriod(period.period)}\n                                >\n                                    {period.periodTitle}\n                                </Button>\n                            )               \n                        }\n                    </Col>\n                </Row>\n            </Container>\n            \n            <Container fluid>\n                <Row className=\"justify-content-md-center\">\n                    <Col xs lg=\"8\">\n                        <Card className=\"shadow-sm\" style={{border:'none'}}>\n                            <div style={{marginTop:'1rem'}}>\n                                <h5 style={{textAlign:'center'}}>{selectedCountry}'s Data</h5>\n                            </div>\n                            <AreaChart \n                                width={ width > 980 ? 1200 : width - 80 } \n                                height={300} \n                                data={countries} \n                                margin={{top: 20, right: 20, left: 20, bottom: 20}}\n                                >\n                            <CartesianGrid strokeDasharray=\"1 1\" />\n                            <XAxis dataKey=\"date\" />\n                            <YAxis />\n                            <Tooltip />\n                            <Legend/>\n                            <Area type=\"monotone\"  dataKey=\"confirmed\" dot={false}  stroke={colors.confirmed} fill={colors.confirmed} />\n                            <Area type=\"monotone\" dataKey=\"recovered\" dot={false} stroke={colors.recovered} fill={colors.recovered} />\n                            <Area type=\"monotone\" dataKey=\"deaths\" dot={false}  stroke={colors.deaths} fill={colors.deaths} />\n                            </AreaChart>\n                        </Card>\n                    </Col>\n                </Row>\n            </Container>\n\n            <Container fluid>\n                <Row className=\"justify-content-md-center\">\n                    <Col xs lg=\"8\">\n                        <Card className=\"shadow-sm\" style={{border:'none',marginTop:'1rem'}}>\n                            <Row className=\"justify-content-md-center\">\n                                <Col>\n                                    <AreaChart \n                                        width={\n                                            width > 980\n                                            ? 480\n                                            : width > 720\n                                            ? width / 2 - 80\n                                            : width - 80\n                                        }\n                                        height={350} \n                                        data={countries} \n                                        margin={{top: 20, right: 20, left: 20, bottom: 20}}\n                                        >\n                                    <CartesianGrid strokeDasharray=\"1 1\" />\n                                    <XAxis dataKey=\"date\" />\n                                    <YAxis />\n                                    <Tooltip />\n                                    <Legend/>\n                                    <Area type=\"monotone\"  dataKey=\"confirmed\" dot={false}  stroke={colors.confirmed} fill={colors.confirmed} />\n                                    </AreaChart>\n                                </Col>\n                                <Col style={{textAlign:'right'}}>\n                                    <div style={{marginTop:'2rem',marginRight:'5rem'}}>\n                                        <p>As of Selected Period available data</p>\n                                        <span><b>From ==> </b> {countries && countries[0] && countries[0].date}</span>\n                                        <h5>\n                                        <NumberFormat \n                                        value={\n                                            countries && \n                                            countries[0] &&\n                                            countries[0].confirmed\n                                        } \n                                        displayType={'text'} \n                                        thousandSeparator={true}\n                                        style={{color:colors.confirmed}} \n                                        />\n                                        </h5>\n                                        <span><b>To ==> </b> {countries && countries[countries.length-1] && countries[countries.length-1].date}</span>\n                                        <h5>\n                                        <NumberFormat \n                                        value={\n                                            countries && \n                                            countries[countries.length-1] &&\n                                            countries[countries.length-1].confirmed\n                                        } \n                                        displayType={'text'} \n                                        thousandSeparator={true}\n                                        style={{color:colors.confirmed}} \n                                        />\n                                        </h5>\n\n                                        <span><b>Confirmed Cases Increased by </b></span>\n                                        <h3>\n                                        <NumberFormat \n                                        value={\n                                            (\n                                                countries && \n                                                countries[countries.length-1] &&\n                                                countries[countries.length-1].confirmed\n                                            ) -\n                                            (\n                                                countries && \n                                                countries[0] &&\n                                                countries[0].confirmed \n                                            )\n                                        } \n                                        displayType={'text'} \n                                        thousandSeparator={true}\n                                        style={{color:colors.deaths}} \n                                        />\n                                        </h3>\n\n                                        <span><b>Daily Average  </b></span>\n                                        <h5>\n                                        <NumberFormat \n                                        value={\n                                            Math.round(\n                                            (\n                                            (\n                                                countries && \n                                                countries[countries.length-1] &&\n                                                countries[countries.length-1].confirmed\n                                            ) -\n                                            (\n                                                countries && \n                                                countries[0] &&\n                                                countries[0].confirmed\n                                            )\n                                            ) /\n                                            (\n                                                chartPeriodSelected === 0 ? \n                                                countries.length : \n                                                chartPeriodSelected\n                                            )\n                                            )\n                                        } \n                                        displayType={'text'} \n                                        thousandSeparator={true}\n                                        />\n                                        \n                                        </h5>\n\n                                        <span><b>Growth % </b></span>\n                                        <h5>\n                                        <NumberFormat \n                                        value={\n                                            Math.round(\n                                            ((\n                                                (\n                                                    countries && \n                                                    countries[countries.length-1] &&\n                                                    countries[countries.length-1].confirmed\n                                                ) -\n                                                (\n                                                    countries && \n                                                    countries[0] &&\n                                                    countries[0].confirmed\n                                                )\n                                            ) /\n                                                (\n                                                    totalConfirmed\n                                                )\n                                            ) * 100,2) \n                                        } \n                                        displayType={'text'} \n                                        thousandSeparator={true}\n                                        style={{color:colors.deaths}} \n                                        /> \n                                        \n                                        </h5>\n                                        <p>Last {countries.length} days</p>\n                                    </div>\n                                </Col>\n                            </Row>\n                        </Card>\n                    </Col>\n                </Row>\n            </Container>\n            <Container fluid>\n                <Row className=\"justify-content-md-center\">\n                    <Col xs lg=\"8\">\n                        <Card className=\"shadow-sm\" style={{border:'none',marginTop:'1rem'}}>\n                            <Row className=\"justify-content-md-center\">\n                                <Col>\n                                    <AreaChart \n                                        width={\n                                            width > 980\n                                            ? 480\n                                            : width > 720\n                                            ? width / 2 - 80\n                                            : width - 80\n                                        }\n                                        height={350} \n                                        data={countries} \n                                        margin={{top: 20, right: 20, left: 20, bottom: 20}}\n                                        >\n                                    <CartesianGrid strokeDasharray=\"1 1\" />\n                                    <XAxis dataKey=\"date\" />\n                                    <YAxis />\n                                    <Tooltip />\n                                    <Legend/>\n                                    <Area type=\"monotone\" dataKey=\"recovered\" dot={false} stroke={colors.recovered} fill={colors.recovered} />\n                                    </AreaChart>\n                                </Col>\n                                <Col style={{textAlign:'right'}}>\n                                    <div style={{marginTop:'2rem',marginRight:'5rem'}}>\n                                        <p>As of Selected Period available data</p>\n                                        <span><b>From ==> </b> {countries && countries[0] && countries[0].date}</span>\n                                        <h5>\n                                        <NumberFormat \n                                        value={\n                                            countries && \n                                            countries[0] &&\n                                            countries[0].recovered\n                                        } \n                                        displayType={'text'} \n                                        thousandSeparator={true}\n                                        style={{color:colors.recovered}} \n                                        />\n                                        </h5>\n                                        <span><b>To ==> </b> {countries && countries[countries.length-1] && countries[countries.length-1].date}</span>\n                                        <h5>\n                                        <NumberFormat \n                                        value={\n                                            countries && \n                                            countries[countries.length-1] &&\n                                            countries[countries.length-1].recovered\n                                        } \n                                        displayType={'text'} \n                                        thousandSeparator={true}\n                                        style={{color:colors.recovered}} \n                                        />\n                                        </h5>\n\n                                        <span><b>Recovery Cases Increased by </b></span>\n                                        <h3>\n                                        <NumberFormat \n                                        value={\n                                            (\n                                                countries && \n                                                countries[countries.length-1] &&\n                                                countries[countries.length-1].recovered\n                                            ) -\n                                            (\n                                                countries && \n                                                countries[0] &&\n                                                countries[0].recovered\n                                            )\n                                        } \n                                        displayType={'text'} \n                                        thousandSeparator={true}\n                                        style={{color:colors.recovered}} \n                                        />\n                                        </h3>\n\n                                        <span><b>Daily Average  </b></span>\n                                        <h5>\n                                        <NumberFormat \n                                        value={\n                                            Math.round(\n                                            (\n                                            (\n                                                countries && \n                                                countries[countries.length-1] &&\n                                                countries[countries.length-1].recovered\n                                            ) -\n                                            (\n                                                countries && \n                                                countries[0] &&\n                                                countries[0].recovered\n                                            )\n                                            ) /\n                                            (\n                                                chartPeriodSelected === 0 ? \n                                                countries.length : \n                                                chartPeriodSelected\n                                            )\n                                            )\n                                        } \n                                        displayType={'text'} \n                                        thousandSeparator={true}\n                                        />\n                                        \n                                        </h5>\n\n                                        <span><b>Growth % </b></span>\n                                        <h5>\n                                        <NumberFormat \n                                        value={\n                                            Math.round(\n                                            ((\n                                                (\n                                                    countries && \n                                                    countries[countries.length-1] &&\n                                                    countries[countries.length-1].recovered\n                                                ) -\n                                                (\n                                                    countries && \n                                                    countries[0] &&\n                                                    countries[0].recovered\n                                                )\n                                            ) /\n                                                (\n                                                    totalRecovered\n                                                )\n                                            ) * 100,2) \n                                        } \n                                        displayType={'text'} \n                                        thousandSeparator={true}\n                                        style={{color:colors.recovered}} \n                                        /> \n                                        \n                                        </h5>\n                                        <p>Last {countries.length} days</p>\n                                    </div>\n                                </Col>\n                            </Row>\n                        </Card>\n                    </Col>\n                </Row>\n            </Container>\n            <Container fluid>\n                <Row className=\"justify-content-md-center\">\n                    <Col xs lg=\"8\">\n                        <Card className=\"shadow-sm\" style={{border:'none',marginTop:'1rem'}}>\n                            <Row className=\"justify-content-md-center\">\n                                <Col>\n                                    <AreaChart \n                                        width={\n                                            width > 980\n                                            ? 480\n                                            : width > 720\n                                            ? width / 2 - 80\n                                            : width - 80\n                                        }\n                                        height={350} \n                                        data={countries} \n                                        margin={{top: 20, right: 20, left: 20, bottom: 20}}\n                                        >\n                                    <CartesianGrid strokeDasharray=\"1 1\" />\n                                    <XAxis dataKey=\"date\" />\n                                    <YAxis />\n                                    <Tooltip />\n                                    <Legend/>\n                                    <Area type=\"monotone\" dataKey=\"deaths\" dot={false}  stroke={colors.deaths} fill={colors.deaths} />\n                                    </AreaChart>\n                                </Col>\n                                <Col style={{textAlign:'right'}}>\n                                    <div style={{marginTop:'2rem',marginRight:'5rem'}}>\n                                        <p>As of Selected Period available data</p>\n                                        <span><b>From ==> </b> {countries && countries[0] && countries[0].date}</span>\n                                        <h5>\n                                        <NumberFormat \n                                        value={\n                                            countries && \n                                            countries[0] &&\n                                            countries[0].dearhs\n                                        } \n                                        displayType={'text'} \n                                        thousandSeparator={true}\n                                        style={{color:colors.deaths}} \n                                        />\n                                        </h5>\n                                        <span><b>To ==> </b> {countries && countries[countries.length-1] && countries[countries.length-1].date}</span>\n                                        <h5>\n                                        <NumberFormat \n                                        value={\n                                            countries && \n                                            countries[countries.length-1] &&\n                                            countries[countries.length-1].deaths\n                                        } \n                                        displayType={'text'} \n                                        thousandSeparator={true}\n                                        style={{color:colors.deaths}} \n                                        />\n                                        </h5>\n\n                                        <span><b>Death Cases Increased by </b></span>\n                                        <h3>\n                                        <NumberFormat \n                                        value={\n                                            (\n                                                countries && \n                                                countries[countries.length-1] &&\n                                                countries[countries.length-1].deaths\n                                            ) -\n                                            (\n                                                countries && \n                                                countries[0] &&\n                                                countries[0].deaths \n                                            )\n                                        } \n                                        displayType={'text'} \n                                        thousandSeparator={true}\n                                        style={{color:colors.deaths}} \n                                        />\n                                        </h3>\n\n                                        <span><b>Daily Average  </b></span>\n                                        <h5>\n                                        <NumberFormat \n                                        value={\n                                            Math.round(\n                                            (\n                                            (\n                                                countries && \n                                                countries[countries.length-1] &&\n                                                countries[countries.length-1].deaths\n                                            ) -\n                                            (\n                                                countries && \n                                                countries[0] &&\n                                                countries[0].deaths\n                                            )\n                                            ) /\n                                            (\n                                                chartPeriodSelected === 0 ? \n                                                countries.length : \n                                                chartPeriodSelected\n                                            )\n                                            )\n                                        } \n                                        displayType={'text'} \n                                        thousandSeparator={true}\n                                        />\n                                        \n                                        </h5>\n\n                                        <span><b>Growth % </b></span>\n                                        <h5>\n                                        <NumberFormat \n                                        value={\n                                            Math.round(\n                                            ((\n                                                (\n                                                    countries && \n                                                    countries[countries.length-1] &&\n                                                    countries[countries.length-1].deaths\n                                                ) -\n                                                (\n                                                    countries && \n                                                    countries[0] &&\n                                                    countries[0].deaths\n                                                )\n                                            ) /\n                                                (\n                                                    totalDeaths\n                                                )\n                                            ) * 100,2) \n                                        } \n                                        displayType={'text'} \n                                        thousandSeparator={true}\n                                        style={{color:colors.deaths}} \n                                        /> \n                                        \n                                        </h5>\n                                        <p>Last {countries.length} days</p>\n                                    </div>\n                                </Col>\n                            </Row>\n                        </Card>\n                    </Col>\n                </Row>\n            </Container>\n            \n        </div>\n    )\n}\n}\nexport default DataChartOnly;"]},"metadata":{},"sourceType":"module"}