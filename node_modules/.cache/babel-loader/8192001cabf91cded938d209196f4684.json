{"ast":null,"code":"var _jsxFileName = \"/Users/shariati/Desktop/Projects/demo2/src/components/dataChartOnly.jsx\";\nimport React, { Component } from 'react';\nimport Axios from 'axios';\nimport { Container, Row, Col, Table, Form, Card, Button } from 'react-bootstrap';\nimport NumberFormat from 'react-number-format';\nimport { AreaChart, XAxis, YAxis, CartesianGrid, Tooltip, Legend, Area } from 'recharts';\nimport ReactGA from 'react-ga';\nimport Loader from 'react-loader-spinner';\nconst colors = {\n  confirmed: '#FFD31D',\n  recovered: '#21BF72',\n  deaths: '#DD2C00'\n};\nconst showChartPeriod = [{\n  period: 0,\n  periodTitle: \"All Data\"\n}, {\n  period: 7,\n  periodTitle: \"Last 7 Days\"\n}, {\n  period: 14,\n  periodTitle: \"Last 14 Days\"\n}, {\n  period: 30,\n  periodTitle: \"Last 30 Days\"\n}];\n\nclass DataChartOnly extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      currentData: [],\n      currentPage: 1,\n      dataPerPage: 7,\n      selectedCountry: \"China\",\n      population: 0,\n      temp: [],\n      countries: [],\n      tableCountries: [],\n      chartPeriod: 7,\n      width: window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth,\n      chartPeriodSelected: 7,\n      totalConfirmed: 0,\n      totalRecovered: 0,\n      totalDeaths: 0\n    };\n\n    this.updateDimensions = () => {\n      const width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n      this.setState({\n        width\n      });\n    };\n\n    this.getData = this.getData.bind(this);\n    this.getCountry = this.getCountry.bind(this);\n    this.updateChartPeriod = this.updateChartPeriod.bind(this);\n  }\n\n  componentDidMount() {\n    ReactGA.initialize('UA-163115935-1');\n    ReactGA.pageview('/Data-Visualization');\n    this.getCountryByIP();\n    window.addEventListener('resize', this.updateDimensions);\n  }\n\n  async getCountryByIP() {\n    const res = await Axios.get(\"https://ipapi.co/json\");\n    this.setState({\n      selectedCountry: res.data.country_name === \"United States\" ? \"US\" : res.data.country_name,\n      population: res.data.country_population\n    });\n    this.getData();\n  }\n\n  async getData() {\n    const selectedCountry = this.state.selectedCountry;\n    const res = await Axios.get(\"https://pomber.github.io/covid19/timeseries.json\");\n    const byConfirmed = res.data[selectedCountry];\n    byConfirmed.sort(function (a, b) {\n      return a.confirmed - b.confirmed;\n    });\n    const totalConfirmed = byConfirmed[byConfirmed.length - 1].confirmed;\n    const totalRecovered = byConfirmed[byConfirmed.length - 1].recovered;\n    const totalDeaths = byConfirmed[byConfirmed.length - 1].deaths; //console.log(totalConfirmed);\n\n    const indexOfLastData = res.data[selectedCountry].length;\n    const indexOfFirstData = indexOfLastData - this.state.chartPeriod; //console.log(showChartPeriod);\n\n    this.setState({\n      loading: false,\n      countries: res.data[selectedCountry].slice(indexOfFirstData, indexOfLastData),\n      tableCountries: byConfirmed,\n      temp: Object.keys(res.data),\n      totalConfirmed,\n      totalRecovered,\n      totalDeaths\n    });\n  }\n\n  async getCountry(event) {\n    event.persist();\n    const countryRes = await Axios.get(\"https://pomber.github.io/covid19/timeseries.json\");\n    const searchCountry = event.target.value;\n    const byConfirmed = countryRes.data[searchCountry].slice(0);\n    byConfirmed.sort(function (a, b) {\n      return a.confirmed - b.confirmed;\n    });\n    const totalConfirmed = byConfirmed[byConfirmed.length - 1].confirmed;\n    const totalRecovered = byConfirmed[byConfirmed.length - 1].recovered;\n    const totalDeaths = byConfirmed[byConfirmed.length - 1].deaths;\n    const indexOfLastData = countryRes.data[searchCountry].length;\n    const indexOfFirstData = indexOfLastData - this.state.chartPeriod;\n    this.setState({\n      loading: false,\n      selectedCountry: searchCountry,\n      countries: countryRes.data[searchCountry].slice(indexOfFirstData, indexOfLastData),\n      tableCountries: byConfirmed,\n      totalConfirmed,\n      totalRecovered,\n      totalDeaths\n    });\n  }\n\n  async updateChartPeriod(props) {\n    const countryRes = await Axios.get(\"https://pomber.github.io/covid19/timeseries.json\"); //console.log(countryRes.data[this.state.selectedCountry]);\n\n    const byConfirmed = countryRes.data[this.state.selectedCountry].slice(0);\n    byConfirmed.sort(function (a, b) {\n      return b.confirmed - a.confirmed;\n    });\n    const indexOfLastData = countryRes.data[this.state.selectedCountry].length;\n    const indexOfFirstData = indexOfLastData - props;\n    const countries = props === 0 ? countryRes.data[this.state.selectedCountry] : countryRes.data[this.state.selectedCountry].slice(indexOfFirstData, indexOfLastData);\n    this.setState({\n      loading: false,\n      countries,\n      chartPeriodSelected: props\n    }); //console.log(event.target.value);\n  }\n\n  render() {\n    const {\n      selectedCountry,\n      population,\n      temp,\n      countries,\n      width,\n      chartPeriodSelected,\n      totalConfirmed,\n      totalRecovered,\n      totalDeaths\n    } = this.state;\n    const loading = this.state.loading;\n    if (loading) return /*#__PURE__*/React.createElement(Container, {\n      fluid: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      className: \"justify-content-md-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      xs: \"12\",\n      lg: \"8\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"shadow\",\n      style: {\n        marginBottom: '1rem',\n        paddingTop: '15rem',\n        border: 'none',\n        minHeight: \"700px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Loader, {\n      type: \"ThreeDots\",\n      color: \"#DD2C00\",\n      height: 100,\n      width: 100,\n      timeout: 9000000000,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 21\n      }\n    })))));\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"mid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Container, {\n      fluid: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      className: \"justify-content-md-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      xs: \"12\",\n      lg: \"8\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"shadow-sm\",\n      style: {\n        marginBottom: '1rem',\n        padding: '1rem',\n        border: 'none'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Form.Control, {\n      as: \"select\",\n      size: \"sm\",\n      onChange: this.getCountry,\n      custom: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 33\n      }\n    }, selectedCountry), temp.map((items, i) => /*#__PURE__*/React.createElement(\"option\", {\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 33\n      }\n    }, items)))))), /*#__PURE__*/React.createElement(Row, {\n      className: \"justify-content-md-center\",\n      style: {\n        marginBottom: \"1rem\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      xs: true,\n      lg: \"8\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      className: \"justify-content-md-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 29\n      }\n    }, showChartPeriod.map((period, index) => /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      key: index,\n      variant: \"primary\",\n      onClick: () => this.updateChartPeriod(period.period),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 45\n      }\n    }, period.periodTitle))))))), /*#__PURE__*/React.createElement(Container, {\n      fluid: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      className: \"justify-content-md-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      xs: true,\n      lg: \"8\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"shadow-sm\",\n      style: {\n        border: 'none'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        marginTop: '1rem'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"h5\", {\n      style: {\n        textAlign: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 33\n      }\n    }, selectedCountry, \"'s Data\")), /*#__PURE__*/React.createElement(AreaChart, {\n      width: width > 980 ? 1200 : width - 80,\n      height: 300,\n      data: countries,\n      margin: {\n        top: 20,\n        right: 20,\n        left: 20,\n        bottom: 20\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(CartesianGrid, {\n      strokeDasharray: \"1 1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"date\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(YAxis, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(Tooltip, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(Legend, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(Area, {\n      type: \"monotone\",\n      dataKey: \"confirmed\",\n      dot: false,\n      stroke: colors.confirmed,\n      fill: colors.confirmed,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(Area, {\n      type: \"monotone\",\n      dataKey: \"recovered\",\n      dot: false,\n      stroke: colors.recovered,\n      fill: colors.recovered,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(Area, {\n      type: \"monotone\",\n      dataKey: \"deaths\",\n      dot: false,\n      stroke: colors.deaths,\n      fill: colors.deaths,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 29\n      }\n    })))))), /*#__PURE__*/React.createElement(Container, {\n      fluid: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      className: \"justify-content-md-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      xs: true,\n      lg: \"8\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"shadow-sm\",\n      style: {\n        border: 'none',\n        marginTop: '1rem'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      className: \"justify-content-md-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(AreaChart, {\n      width: width > 980 ? 480 : width > 720 ? width / 2 - 80 : width - 80,\n      height: 350,\n      data: countries,\n      margin: {\n        top: 20,\n        right: 20,\n        left: 20,\n        bottom: 20\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(CartesianGrid, {\n      strokeDasharray: \"1 1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"date\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(YAxis, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(Tooltip, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(Legend, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(Area, {\n      type: \"monotone\",\n      dataKey: \"confirmed\",\n      dot: false,\n      stroke: colors.confirmed,\n      fill: colors.confirmed,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 37\n      }\n    }))), /*#__PURE__*/React.createElement(Col, {\n      style: {\n        textAlign: 'right'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        marginTop: '2rem',\n        marginRight: '5rem'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 41\n      }\n    }, \"As of Selected Period available data\"), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 47\n      }\n    }, \"From ==> \"), \" \", countries && countries[0] && countries[0].date), /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(NumberFormat, {\n      value: countries && countries[0] && countries[0].confirmed,\n      displayType: 'text',\n      thousandSeparator: true,\n      style: {\n        color: colors.confirmed\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 41\n      }\n    })), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 47\n      }\n    }, \"To ==> \"), \" \", countries && countries[countries.length - 1] && countries[countries.length - 1].date), /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(NumberFormat, {\n      value: countries && countries[countries.length - 1] && countries[countries.length - 1].confirmed,\n      displayType: 'text',\n      thousandSeparator: true,\n      style: {\n        color: colors.confirmed\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 41\n      }\n    })), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 47\n      }\n    }, \"Confirmed Cases Increased by \")), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(NumberFormat, {\n      value: (countries && countries[countries.length - 1] && countries[countries.length - 1].confirmed) - (countries && countries[0] && countries[0].confirmed),\n      displayType: 'text',\n      thousandSeparator: true,\n      style: {\n        color: colors.deaths\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 41\n      }\n    })), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 47\n      }\n    }, \"Daily Average  \")), /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(NumberFormat, {\n      value: Math.round(((countries && countries[countries.length - 1] && countries[countries.length - 1].confirmed) - (countries && countries[0] && countries[0].confirmed)) / (chartPeriodSelected === 0 ? countries.length : chartPeriodSelected)),\n      displayType: 'text',\n      thousandSeparator: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 41\n      }\n    })), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 47\n      }\n    }, \"Growth % \")), /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(NumberFormat, {\n      value: Math.round(((countries && countries[countries.length - 1] && countries[countries.length - 1].confirmed) - (countries && countries[0] && countries[0].confirmed)) / totalConfirmed * 100, 2),\n      displayType: 'text',\n      thousandSeparator: true,\n      style: {\n        color: colors.deaths\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 41\n      }\n    })), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 41\n      }\n    }, \"Last \", countries.length, \" days\")))))))), /*#__PURE__*/React.createElement(Container, {\n      fluid: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      className: \"justify-content-md-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      xs: true,\n      lg: \"8\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"shadow-sm\",\n      style: {\n        border: 'none',\n        marginTop: '1rem'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 410,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      className: \"justify-content-md-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(AreaChart, {\n      width: width > 980 ? 480 : width > 720 ? width / 2 - 80 : width - 80,\n      height: 350,\n      data: countries,\n      margin: {\n        top: 20,\n        right: 20,\n        left: 20,\n        bottom: 20\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(CartesianGrid, {\n      strokeDasharray: \"1 1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"date\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(YAxis, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(Tooltip, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 428,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(Legend, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(Area, {\n      type: \"monotone\",\n      dataKey: \"recovered\",\n      dot: false,\n      stroke: colors.recovered,\n      fill: colors.recovered,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 430,\n        columnNumber: 37\n      }\n    }))), /*#__PURE__*/React.createElement(Col, {\n      style: {\n        textAlign: 'right'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 433,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        marginTop: '2rem',\n        marginRight: '5rem'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 434,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 435,\n        columnNumber: 41\n      }\n    }, \"As of Selected Period available data\"), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 436,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 436,\n        columnNumber: 47\n      }\n    }, \"From ==> \"), \" \", countries && countries[0] && countries[0].date), /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 437,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(NumberFormat, {\n      value: countries && countries[0] && countries[0].recovered,\n      displayType: 'text',\n      thousandSeparator: true,\n      style: {\n        color: colors.recovered\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 438,\n        columnNumber: 41\n      }\n    })), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 449,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 449,\n        columnNumber: 47\n      }\n    }, \"To ==> \"), \" \", countries && countries[countries.length - 1] && countries[countries.length - 1].date), /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 450,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(NumberFormat, {\n      value: countries && countries[countries.length - 1] && countries[countries.length - 1].recovered,\n      displayType: 'text',\n      thousandSeparator: true,\n      style: {\n        color: colors.recovered\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 451,\n        columnNumber: 41\n      }\n    })), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 463,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 463,\n        columnNumber: 47\n      }\n    }, \"Recovery Cases Increased by \")), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 464,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(NumberFormat, {\n      value: (countries && countries[countries.length - 1] && countries[countries.length - 1].recovered) - (countries && countries[0] && countries[0].recovered),\n      displayType: 'text',\n      thousandSeparator: true,\n      style: {\n        color: colors.recovered\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 465,\n        columnNumber: 41\n      }\n    })), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 484,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 484,\n        columnNumber: 47\n      }\n    }, \"Daily Average  \")), /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 485,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(NumberFormat, {\n      value: Math.round(((countries && countries[countries.length - 1] && countries[countries.length - 1].recovered) - (countries && countries[0] && countries[0].recovered)) / (chartPeriodSelected === 0 ? countries.length : chartPeriodSelected)),\n      displayType: 'text',\n      thousandSeparator: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 486,\n        columnNumber: 41\n      }\n    })), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 514,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 514,\n        columnNumber: 47\n      }\n    }, \"Growth % \")), /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 515,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(NumberFormat, {\n      value: Math.round(((countries && countries[countries.length - 1] && countries[countries.length - 1].recovered) - (countries && countries[0] && countries[0].recovered)) / totalRecovered * 100, 2),\n      displayType: 'text',\n      thousandSeparator: true,\n      style: {\n        color: colors.recovered\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 516,\n        columnNumber: 41\n      }\n    })), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 542,\n        columnNumber: 41\n      }\n    }, \"Last \", countries.length, \" days\")))))))), /*#__PURE__*/React.createElement(Container, {\n      fluid: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 550,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      className: \"justify-content-md-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 551,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      xs: true,\n      lg: \"8\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 552,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"shadow-sm\",\n      style: {\n        border: 'none',\n        marginTop: '1rem'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 553,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      className: \"justify-content-md-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 554,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 555,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(AreaChart, {\n      width: width > 980 ? 480 : width > 720 ? width / 2 - 80 : width - 80,\n      height: 350,\n      data: countries,\n      margin: {\n        top: 20,\n        right: 20,\n        left: 20,\n        bottom: 20\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 556,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(CartesianGrid, {\n      strokeDasharray: \"1 1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 568,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"date\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 569,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(YAxis, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 570,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(Tooltip, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 571,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(Legend, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 572,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(Area, {\n      type: \"monotone\",\n      dataKey: \"deaths\",\n      dot: false,\n      stroke: colors.deaths,\n      fill: colors.deaths,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 573,\n        columnNumber: 37\n      }\n    }))), /*#__PURE__*/React.createElement(Col, {\n      style: {\n        textAlign: 'right'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 576,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        marginTop: '2rem',\n        marginRight: '5rem'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 577,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 578,\n        columnNumber: 41\n      }\n    }, \"As of Selected Period available data\"), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 579,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 579,\n        columnNumber: 47\n      }\n    }, \"From ==> \"), \" \", countries && countries[0] && countries[0].date), /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 580,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(NumberFormat, {\n      value: countries && countries[0] && countries[0].dearhs,\n      displayType: 'text',\n      thousandSeparator: true,\n      style: {\n        color: colors.deaths\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 581,\n        columnNumber: 41\n      }\n    })), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 592,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 592,\n        columnNumber: 47\n      }\n    }, \"To ==> \"), \" \", countries && countries[countries.length - 1] && countries[countries.length - 1].date), /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 593,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(NumberFormat, {\n      value: countries && countries[countries.length - 1] && countries[countries.length - 1].deaths,\n      displayType: 'text',\n      thousandSeparator: true,\n      style: {\n        color: colors.deaths\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 594,\n        columnNumber: 41\n      }\n    })), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 606,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 606,\n        columnNumber: 47\n      }\n    }, \"Death Cases Increased by \")), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 607,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(NumberFormat, {\n      value: (countries && countries[countries.length - 1] && countries[countries.length - 1].deaths) - (countries && countries[0] && countries[0].deaths),\n      displayType: 'text',\n      thousandSeparator: true,\n      style: {\n        color: colors.deaths\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 608,\n        columnNumber: 41\n      }\n    })), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 627,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 627,\n        columnNumber: 47\n      }\n    }, \"Daily Average  \")), /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 628,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(NumberFormat, {\n      value: Math.round(((countries && countries[countries.length - 1] && countries[countries.length - 1].deaths) - (countries && countries[0] && countries[0].deaths)) / (chartPeriodSelected === 0 ? countries.length : chartPeriodSelected)),\n      displayType: 'text',\n      thousandSeparator: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 629,\n        columnNumber: 41\n      }\n    })), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 657,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 657,\n        columnNumber: 47\n      }\n    }, \"Growth % \")), /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 658,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(NumberFormat, {\n      value: Math.round(((countries && countries[countries.length - 1] && countries[countries.length - 1].deaths) - (countries && countries[0] && countries[0].deaths)) / totalDeaths * 100, 2),\n      displayType: 'text',\n      thousandSeparator: true,\n      style: {\n        color: colors.deaths\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 659,\n        columnNumber: 41\n      }\n    })), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 685,\n        columnNumber: 41\n      }\n    }, \"Last \", countries.length, \" days\")))))))));\n  }\n\n}\n\nexport default DataChartOnly;","map":{"version":3,"sources":["/Users/shariati/Desktop/Projects/demo2/src/components/dataChartOnly.jsx"],"names":["React","Component","Axios","Container","Row","Col","Table","Form","Card","Button","NumberFormat","AreaChart","XAxis","YAxis","CartesianGrid","Tooltip","Legend","Area","ReactGA","Loader","colors","confirmed","recovered","deaths","showChartPeriod","period","periodTitle","DataChartOnly","constructor","props","state","loading","currentData","currentPage","dataPerPage","selectedCountry","population","temp","countries","tableCountries","chartPeriod","width","window","innerWidth","document","documentElement","clientWidth","body","chartPeriodSelected","totalConfirmed","totalRecovered","totalDeaths","updateDimensions","setState","getData","bind","getCountry","updateChartPeriod","componentDidMount","initialize","pageview","getCountryByIP","addEventListener","res","get","data","country_name","country_population","byConfirmed","sort","a","b","length","indexOfLastData","indexOfFirstData","slice","Object","keys","event","persist","countryRes","searchCountry","target","value","render","marginBottom","paddingTop","border","minHeight","padding","map","items","i","index","marginTop","textAlign","top","right","left","bottom","marginRight","date","color","Math","round","dearhs"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Axios from 'axios';\nimport {Container,Row,Col,Table,Form, Card, Button} from 'react-bootstrap';\nimport NumberFormat from 'react-number-format';\nimport { AreaChart, XAxis,YAxis, CartesianGrid,Tooltip,Legend, Area} from 'recharts';\nimport ReactGA from 'react-ga';\nimport Loader from 'react-loader-spinner';\n\nconst colors = {\n    confirmed: '#FFD31D',\n    recovered: '#21BF72',\n    deaths: '#DD2C00',\n  };\n\n  const showChartPeriod=[\n    {\n        period:0,\n        periodTitle:\"All Data\"\n    },\n    {\n        period:7,\n        periodTitle:\"Last 7 Days\"\n    },\n    {\n        period:14,\n        periodTitle:\"Last 14 Days\"\n    },\n    {\n        period:30,\n        periodTitle:\"Last 30 Days\"\n    }\n]\nclass DataChartOnly extends Component{\n    constructor (props){\n        super(props);\n        this.getData=this.getData.bind(this);\n        this.getCountry=this.getCountry.bind(this);\n        this.updateChartPeriod=this.updateChartPeriod.bind(this);\n      }\n      \n      state={\n        loading:true,\n        currentData:[],\n        currentPage:1,\n        dataPerPage:7,\n        selectedCountry:\"China\",\n        population:0,\n        temp:[],\n        countries:[],\n        tableCountries:[],\n        chartPeriod:7,\n        width:\n        window.innerWidth ||\n        document.documentElement.clientWidth ||\n        document.body.clientWidth,\n        chartPeriodSelected:7,\n        totalConfirmed:0,\n        totalRecovered:0,\n        totalDeaths:0\n      }\n      componentDidMount(){\n        \n        ReactGA.initialize('UA-163115935-1');\n        ReactGA.pageview('/Data-Visualization');\n\n        this.getCountryByIP();\n        window.addEventListener('resize',this.updateDimensions);\n      }\n      updateDimensions = ()=>{\n          const width = \n          window.innerWidth ||\n          document.documentElement.clientWidth ||\n          document.body.clientWidth;\n\n          this.setState({width});\n      }\n      async getCountryByIP(){\n          const res=await Axios.get(\"https://ipapi.co/json\");\n          \n          this.setState({\n              selectedCountry:res.data.country_name ===\"United States\" ? \"US\" : res.data.country_name,\n              population:res.data.country_population \n          })\n          this.getData();\n      }\n      async getData(){\n        const selectedCountry=this.state.selectedCountry;\n        const res=await Axios.get(\"https://pomber.github.io/covid19/timeseries.json\");\n        \n        const byConfirmed=res.data[selectedCountry];\n        byConfirmed.sort(function(a,b){\n            return a.confirmed - b.confirmed;\n        });\n        \n        const totalConfirmed=byConfirmed[byConfirmed.length-1].confirmed;\n        const totalRecovered=byConfirmed[byConfirmed.length-1].recovered;\n        const totalDeaths=byConfirmed[byConfirmed.length-1].deaths;\n        \n        //console.log(totalConfirmed);\n        \n        const indexOfLastData =res.data[selectedCountry].length; \n        const indexOfFirstData=indexOfLastData - this.state.chartPeriod;\n        //console.log(showChartPeriod);\n        this.setState({\n            loading:false,\n          countries:res.data[selectedCountry].slice(indexOfFirstData,indexOfLastData),\n          tableCountries:byConfirmed,\n          temp:Object.keys(res.data),\n          totalConfirmed,\n          totalRecovered,\n          totalDeaths\n        })\n      }\n      async getCountry(event){\n        event.persist();\n        const countryRes=await Axios.get(\"https://pomber.github.io/covid19/timeseries.json\");\n        const searchCountry=event.target.value;\n        \n        const byConfirmed=countryRes.data[searchCountry].slice(0);\n        byConfirmed.sort(function(a,b){\n            return a.confirmed - b.confirmed;\n        });\n\n        const totalConfirmed=byConfirmed[byConfirmed.length-1].confirmed;\n        const totalRecovered=byConfirmed[byConfirmed.length-1].recovered;\n        const totalDeaths=byConfirmed[byConfirmed.length-1].deaths;\n\n        const indexOfLastData =countryRes.data[searchCountry].length; \n        const indexOfFirstData=indexOfLastData - this.state.chartPeriod;\n\n        this.setState({\n            loading:false,\n            selectedCountry:searchCountry,\n            countries:countryRes.data[searchCountry].slice(indexOfFirstData,indexOfLastData),\n            tableCountries:byConfirmed,\n            totalConfirmed,\n            totalRecovered,\n            totalDeaths\n        })\n        \n      }\n\n      async updateChartPeriod(props){\n        \n\n        const countryRes=await Axios.get(\"https://pomber.github.io/covid19/timeseries.json\");\n        \n        //console.log(countryRes.data[this.state.selectedCountry]);\n        \n        const byConfirmed=countryRes.data[this.state.selectedCountry].slice(0);\n        byConfirmed.sort(function(a,b){\n            return b.confirmed - a.confirmed;\n        });\n\n        const indexOfLastData =countryRes.data[this.state.selectedCountry].length; \n        const indexOfFirstData=indexOfLastData - props;\n\n        const countries = props === 0 ? \n        countryRes.data[this.state.selectedCountry] : \n        countryRes.data[this.state.selectedCountry].slice(indexOfFirstData,indexOfLastData);\n        \n        this.setState({\n            loading:false,\n            countries,\n            chartPeriodSelected:props\n        })\n        //console.log(event.target.value);\n      }\n    \nrender(){\n    const {\n        selectedCountry,\n        population,\n        temp,\n        countries,\n        width,\n        chartPeriodSelected,\n        totalConfirmed,\n        totalRecovered,\n        totalDeaths\n    } = this.state;\n\n    const loading = this.state.loading;\n    if(loading) return (\n        <Container fluid>\n            <Row className=\"justify-content-md-center\">\n                <Col xs=\"12\" lg=\"8\">\n                <Card \n                    className=\"shadow\" \n                    style={{marginBottom:'1rem',paddingTop:'15rem',border:'none',minHeight:\"700px\"}}\n                >\n                    <Loader \n                        type=\"ThreeDots\"\n                        color=\"#DD2C00\"\n                        height={100}\n                        width={100}\n                        timeout={9000000000}\n                    />\n                </Card>     \n                </Col>\n            </Row>\n        </Container>\n    );\n    return(\n        <div className=\"mid\">\n            <Container fluid>\n                <Row className=\"justify-content-md-center\">\n                    <Col xs=\"12\" lg=\"8\">\n                    <Card className=\"shadow-sm\" style={{marginBottom:'1rem',padding:'1rem',border:'none'}}>\n                        <Form.Control as=\"select\" size=\"sm\" onChange={this.getCountry} custom>\n                                <option>{selectedCountry}</option> \n                                {\n                                temp.map((items,i)=>\n                                <option key={i}>{items}</option>  \n                                )\n                                }\n                            </Form.Control>\n                    </Card>     \n                    </Col>\n                </Row>\n\n                <Row className=\"justify-content-md-center\" style={{marginBottom:\"1rem\"}}>\n                        <Col xs lg=\"8\">\n                            <Row className=\"justify-content-md-center\">\n                                {\n                                    showChartPeriod.map((period,index)=>\n                                        <Col>\n                                            <Button key={index} variant=\"primary\" onClick={()=>this.updateChartPeriod(period.period)}>{period.periodTitle}</Button>\n                                        </Col>\n                                    )\n                                }\n                            </Row>\n                        </Col>\n                    </Row>\n            </Container>\n            \n            <Container fluid>\n                <Row className=\"justify-content-md-center\">\n                    <Col xs lg=\"8\">\n                        <Card className=\"shadow-sm\" style={{border:'none'}}>\n                            <div style={{marginTop:'1rem'}}>\n                                <h5 style={{textAlign:'center'}}>{selectedCountry}'s Data</h5>\n                            </div>\n                            <AreaChart \n                                width={ width > 980 ? 1200 : width - 80 } \n                                height={300} \n                                data={countries} \n                                margin={{top: 20, right: 20, left: 20, bottom: 20}}\n                                >\n                            <CartesianGrid strokeDasharray=\"1 1\" />\n                            <XAxis dataKey=\"date\" />\n                            <YAxis />\n                            <Tooltip />\n                            <Legend/>\n                            <Area type=\"monotone\"  dataKey=\"confirmed\" dot={false}  stroke={colors.confirmed} fill={colors.confirmed} />\n                            <Area type=\"monotone\" dataKey=\"recovered\" dot={false} stroke={colors.recovered} fill={colors.recovered} />\n                            <Area type=\"monotone\" dataKey=\"deaths\" dot={false}  stroke={colors.deaths} fill={colors.deaths} />\n                            </AreaChart>\n                        </Card>\n                    </Col>\n                </Row>\n            </Container>\n\n            <Container fluid>\n                <Row className=\"justify-content-md-center\">\n                    <Col xs lg=\"8\">\n                        <Card className=\"shadow-sm\" style={{border:'none',marginTop:'1rem'}}>\n                            <Row className=\"justify-content-md-center\">\n                                <Col>\n                                    <AreaChart \n                                        width={\n                                            width > 980\n                                            ? 480\n                                            : width > 720\n                                            ? width / 2 - 80\n                                            : width - 80\n                                        }\n                                        height={350} \n                                        data={countries} \n                                        margin={{top: 20, right: 20, left: 20, bottom: 20}}\n                                        >\n                                    <CartesianGrid strokeDasharray=\"1 1\" />\n                                    <XAxis dataKey=\"date\" />\n                                    <YAxis />\n                                    <Tooltip />\n                                    <Legend/>\n                                    <Area type=\"monotone\"  dataKey=\"confirmed\" dot={false}  stroke={colors.confirmed} fill={colors.confirmed} />\n                                    </AreaChart>\n                                </Col>\n                                <Col style={{textAlign:'right'}}>\n                                    <div style={{marginTop:'2rem',marginRight:'5rem'}}>\n                                        <p>As of Selected Period available data</p>\n                                        <span><b>From ==> </b> {countries && countries[0] && countries[0].date}</span>\n                                        <h5>\n                                        <NumberFormat \n                                        value={\n                                            countries && \n                                            countries[0] &&\n                                            countries[0].confirmed\n                                        } \n                                        displayType={'text'} \n                                        thousandSeparator={true}\n                                        style={{color:colors.confirmed}} \n                                        />\n                                        </h5>\n                                        <span><b>To ==> </b> {countries && countries[countries.length-1] && countries[countries.length-1].date}</span>\n                                        <h5>\n                                        <NumberFormat \n                                        value={\n                                            countries && \n                                            countries[countries.length-1] &&\n                                            countries[countries.length-1].confirmed\n                                        } \n                                        displayType={'text'} \n                                        thousandSeparator={true}\n                                        style={{color:colors.confirmed}} \n                                        />\n                                        </h5>\n\n                                        <span><b>Confirmed Cases Increased by </b></span>\n                                        <h3>\n                                        <NumberFormat \n                                        value={\n                                            (\n                                                countries && \n                                                countries[countries.length-1] &&\n                                                countries[countries.length-1].confirmed\n                                            ) -\n                                            (\n                                                countries && \n                                                countries[0] &&\n                                                countries[0].confirmed \n                                            )\n                                        } \n                                        displayType={'text'} \n                                        thousandSeparator={true}\n                                        style={{color:colors.deaths}} \n                                        />\n                                        </h3>\n\n                                        <span><b>Daily Average  </b></span>\n                                        <h5>\n                                        <NumberFormat \n                                        value={\n                                            Math.round(\n                                            (\n                                            (\n                                                countries && \n                                                countries[countries.length-1] &&\n                                                countries[countries.length-1].confirmed\n                                            ) -\n                                            (\n                                                countries && \n                                                countries[0] &&\n                                                countries[0].confirmed\n                                            )\n                                            ) /\n                                            (\n                                                chartPeriodSelected === 0 ? \n                                                countries.length : \n                                                chartPeriodSelected\n                                            )\n                                            )\n                                        } \n                                        displayType={'text'} \n                                        thousandSeparator={true}\n                                        />\n                                        \n                                        </h5>\n\n                                        <span><b>Growth % </b></span>\n                                        <h5>\n                                        <NumberFormat \n                                        value={\n                                            Math.round(\n                                            ((\n                                                (\n                                                    countries && \n                                                    countries[countries.length-1] &&\n                                                    countries[countries.length-1].confirmed\n                                                ) -\n                                                (\n                                                    countries && \n                                                    countries[0] &&\n                                                    countries[0].confirmed\n                                                )\n                                            ) /\n                                                (\n                                                    totalConfirmed\n                                                )\n                                            ) * 100,2) \n                                        } \n                                        displayType={'text'} \n                                        thousandSeparator={true}\n                                        style={{color:colors.deaths}} \n                                        /> \n                                        \n                                        </h5>\n                                        <p>Last {countries.length} days</p>\n                                    </div>\n                                </Col>\n                            </Row>\n                        </Card>\n                    </Col>\n                </Row>\n            </Container>\n            <Container fluid>\n                <Row className=\"justify-content-md-center\">\n                    <Col xs lg=\"8\">\n                        <Card className=\"shadow-sm\" style={{border:'none',marginTop:'1rem'}}>\n                            <Row className=\"justify-content-md-center\">\n                                <Col>\n                                    <AreaChart \n                                        width={\n                                            width > 980\n                                            ? 480\n                                            : width > 720\n                                            ? width / 2 - 80\n                                            : width - 80\n                                        }\n                                        height={350} \n                                        data={countries} \n                                        margin={{top: 20, right: 20, left: 20, bottom: 20}}\n                                        >\n                                    <CartesianGrid strokeDasharray=\"1 1\" />\n                                    <XAxis dataKey=\"date\" />\n                                    <YAxis />\n                                    <Tooltip />\n                                    <Legend/>\n                                    <Area type=\"monotone\" dataKey=\"recovered\" dot={false} stroke={colors.recovered} fill={colors.recovered} />\n                                    </AreaChart>\n                                </Col>\n                                <Col style={{textAlign:'right'}}>\n                                    <div style={{marginTop:'2rem',marginRight:'5rem'}}>\n                                        <p>As of Selected Period available data</p>\n                                        <span><b>From ==> </b> {countries && countries[0] && countries[0].date}</span>\n                                        <h5>\n                                        <NumberFormat \n                                        value={\n                                            countries && \n                                            countries[0] &&\n                                            countries[0].recovered\n                                        } \n                                        displayType={'text'} \n                                        thousandSeparator={true}\n                                        style={{color:colors.recovered}} \n                                        />\n                                        </h5>\n                                        <span><b>To ==> </b> {countries && countries[countries.length-1] && countries[countries.length-1].date}</span>\n                                        <h5>\n                                        <NumberFormat \n                                        value={\n                                            countries && \n                                            countries[countries.length-1] &&\n                                            countries[countries.length-1].recovered\n                                        } \n                                        displayType={'text'} \n                                        thousandSeparator={true}\n                                        style={{color:colors.recovered}} \n                                        />\n                                        </h5>\n\n                                        <span><b>Recovery Cases Increased by </b></span>\n                                        <h3>\n                                        <NumberFormat \n                                        value={\n                                            (\n                                                countries && \n                                                countries[countries.length-1] &&\n                                                countries[countries.length-1].recovered\n                                            ) -\n                                            (\n                                                countries && \n                                                countries[0] &&\n                                                countries[0].recovered\n                                            )\n                                        } \n                                        displayType={'text'} \n                                        thousandSeparator={true}\n                                        style={{color:colors.recovered}} \n                                        />\n                                        </h3>\n\n                                        <span><b>Daily Average  </b></span>\n                                        <h5>\n                                        <NumberFormat \n                                        value={\n                                            Math.round(\n                                            (\n                                            (\n                                                countries && \n                                                countries[countries.length-1] &&\n                                                countries[countries.length-1].recovered\n                                            ) -\n                                            (\n                                                countries && \n                                                countries[0] &&\n                                                countries[0].recovered\n                                            )\n                                            ) /\n                                            (\n                                                chartPeriodSelected === 0 ? \n                                                countries.length : \n                                                chartPeriodSelected\n                                            )\n                                            )\n                                        } \n                                        displayType={'text'} \n                                        thousandSeparator={true}\n                                        />\n                                        \n                                        </h5>\n\n                                        <span><b>Growth % </b></span>\n                                        <h5>\n                                        <NumberFormat \n                                        value={\n                                            Math.round(\n                                            ((\n                                                (\n                                                    countries && \n                                                    countries[countries.length-1] &&\n                                                    countries[countries.length-1].recovered\n                                                ) -\n                                                (\n                                                    countries && \n                                                    countries[0] &&\n                                                    countries[0].recovered\n                                                )\n                                            ) /\n                                                (\n                                                    totalRecovered\n                                                )\n                                            ) * 100,2) \n                                        } \n                                        displayType={'text'} \n                                        thousandSeparator={true}\n                                        style={{color:colors.recovered}} \n                                        /> \n                                        \n                                        </h5>\n                                        <p>Last {countries.length} days</p>\n                                    </div>\n                                </Col>\n                            </Row>\n                        </Card>\n                    </Col>\n                </Row>\n            </Container>\n            <Container fluid>\n                <Row className=\"justify-content-md-center\">\n                    <Col xs lg=\"8\">\n                        <Card className=\"shadow-sm\" style={{border:'none',marginTop:'1rem'}}>\n                            <Row className=\"justify-content-md-center\">\n                                <Col>\n                                    <AreaChart \n                                        width={\n                                            width > 980\n                                            ? 480\n                                            : width > 720\n                                            ? width / 2 - 80\n                                            : width - 80\n                                        }\n                                        height={350} \n                                        data={countries} \n                                        margin={{top: 20, right: 20, left: 20, bottom: 20}}\n                                        >\n                                    <CartesianGrid strokeDasharray=\"1 1\" />\n                                    <XAxis dataKey=\"date\" />\n                                    <YAxis />\n                                    <Tooltip />\n                                    <Legend/>\n                                    <Area type=\"monotone\" dataKey=\"deaths\" dot={false}  stroke={colors.deaths} fill={colors.deaths} />\n                                    </AreaChart>\n                                </Col>\n                                <Col style={{textAlign:'right'}}>\n                                    <div style={{marginTop:'2rem',marginRight:'5rem'}}>\n                                        <p>As of Selected Period available data</p>\n                                        <span><b>From ==> </b> {countries && countries[0] && countries[0].date}</span>\n                                        <h5>\n                                        <NumberFormat \n                                        value={\n                                            countries && \n                                            countries[0] &&\n                                            countries[0].dearhs\n                                        } \n                                        displayType={'text'} \n                                        thousandSeparator={true}\n                                        style={{color:colors.deaths}} \n                                        />\n                                        </h5>\n                                        <span><b>To ==> </b> {countries && countries[countries.length-1] && countries[countries.length-1].date}</span>\n                                        <h5>\n                                        <NumberFormat \n                                        value={\n                                            countries && \n                                            countries[countries.length-1] &&\n                                            countries[countries.length-1].deaths\n                                        } \n                                        displayType={'text'} \n                                        thousandSeparator={true}\n                                        style={{color:colors.deaths}} \n                                        />\n                                        </h5>\n\n                                        <span><b>Death Cases Increased by </b></span>\n                                        <h3>\n                                        <NumberFormat \n                                        value={\n                                            (\n                                                countries && \n                                                countries[countries.length-1] &&\n                                                countries[countries.length-1].deaths\n                                            ) -\n                                            (\n                                                countries && \n                                                countries[0] &&\n                                                countries[0].deaths \n                                            )\n                                        } \n                                        displayType={'text'} \n                                        thousandSeparator={true}\n                                        style={{color:colors.deaths}} \n                                        />\n                                        </h3>\n\n                                        <span><b>Daily Average  </b></span>\n                                        <h5>\n                                        <NumberFormat \n                                        value={\n                                            Math.round(\n                                            (\n                                            (\n                                                countries && \n                                                countries[countries.length-1] &&\n                                                countries[countries.length-1].deaths\n                                            ) -\n                                            (\n                                                countries && \n                                                countries[0] &&\n                                                countries[0].deaths\n                                            )\n                                            ) /\n                                            (\n                                                chartPeriodSelected === 0 ? \n                                                countries.length : \n                                                chartPeriodSelected\n                                            )\n                                            )\n                                        } \n                                        displayType={'text'} \n                                        thousandSeparator={true}\n                                        />\n                                        \n                                        </h5>\n\n                                        <span><b>Growth % </b></span>\n                                        <h5>\n                                        <NumberFormat \n                                        value={\n                                            Math.round(\n                                            ((\n                                                (\n                                                    countries && \n                                                    countries[countries.length-1] &&\n                                                    countries[countries.length-1].deaths\n                                                ) -\n                                                (\n                                                    countries && \n                                                    countries[0] &&\n                                                    countries[0].deaths\n                                                )\n                                            ) /\n                                                (\n                                                    totalDeaths\n                                                )\n                                            ) * 100,2) \n                                        } \n                                        displayType={'text'} \n                                        thousandSeparator={true}\n                                        style={{color:colors.deaths}} \n                                        /> \n                                        \n                                        </h5>\n                                        <p>Last {countries.length} days</p>\n                                    </div>\n                                </Col>\n                            </Row>\n                        </Card>\n                    </Col>\n                </Row>\n            </Container>\n            \n        </div>\n    )\n}\n}\nexport default DataChartOnly;"]},"metadata":{},"sourceType":"module"}