{"ast":null,"code":"var _jsxFileName = \"/Users/shariati/Desktop/Projects/demo/src/components/dataChart.jsx\";\nimport React, { Component } from 'react';\nimport Axios from 'axios';\nimport { Container, Row, Col, Table, Form, Card } from 'react-bootstrap';\nimport NumberFormat from 'react-number-format';\nimport { AreaChart, XAxis, YAxis, CartesianGrid, Tooltip, Legend, Area } from 'recharts';\nimport Pagination from './pagination';\nconst colors = {\n  confirmed: 'hsla(27, 100%, 51%, 1)',\n  recovered: 'hsla(91, 100%, 51%, 1)',\n  deaths: 'hsla(0, 100%, 51%, 1)'\n};\n\nclass DataChart extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentData: [],\n      currentPage: 1,\n      dataPerPage: 7,\n      selectedCountry: \"China\",\n      temp: [],\n      countries: [],\n      tableCountries: [],\n      width: window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth\n    };\n\n    this.updateDimensions = () => {\n      const width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n      this.setState({\n        width\n      });\n    };\n\n    this.getCountry = this.getCountry.bind(this);\n    this.paginate = this.paginate.bind(this);\n  }\n\n  componentDidMount() {\n    this.getCountryByIP();\n    window.addEventListener('resize', this.updateDimensions);\n  }\n\n  async getCountryByIP() {\n    const res = await Axios.get(\"https://ipapi.co/json\");\n    this.setState({\n      selectedCountry: res.data.country_name\n    });\n    this.getData();\n  }\n\n  async getData() {\n    const res = await Axios.get(\"https://pomber.github.io/covid19/timeseries.json\");\n    const byConfirmed = res.data.China.slice(0);\n    byConfirmed.sort(function (a, b) {\n      return b.confirmed - a.confirmed;\n    });\n    this.setState({\n      countries: res.data.China,\n      tableCountries: byConfirmed,\n      temp: Object.keys(res.data)\n    });\n    const indexOfLastData = this.state.currentPage * this.state.dataPerPage;\n    const indexOfFirstData = indexOfLastData - this.state.dataPerPage;\n    this.setState({\n      currentData: this.state.tableCountries.slice(indexOfFirstData, indexOfLastData)\n    });\n  }\n\n  async getCountry(event) {\n    event.persist();\n    const countryRes = await Axios.get(\"https://pomber.github.io/covid19/timeseries.json\");\n    const searchCountry = event.target.value;\n    const byConfirmed = countryRes.data[searchCountry].slice(0);\n    byConfirmed.sort(function (a, b) {\n      return b.confirmed - a.confirmed;\n    });\n    this.setState({\n      selectedCountry: searchCountry,\n      countries: countryRes.data[searchCountry],\n      tableCountries: byConfirmed\n    });\n    const indexOfLastData = this.state.currentPage * this.state.dataPerPage;\n    const indexOfFirstData = indexOfLastData - this.state.dataPerPage;\n    this.setState({\n      currentData: this.state.tableCountries.slice(indexOfFirstData, indexOfLastData)\n    });\n  }\n\n  async updatePageNumber() {\n    const countryRes = await Axios.get(\"https://pomber.github.io/covid19/timeseries.json\");\n    const searchCountry = this.state.selectedCountry;\n    const byConfirmed = countryRes.data[searchCountry].slice(0);\n    byConfirmed.sort(function (a, b) {\n      return b.confirmed - a.confirmed;\n    });\n    this.setState({\n      selectedCountry: searchCountry,\n      countries: countryRes.data[searchCountry],\n      tableCountries: byConfirmed\n    });\n    const indexOfLastData = this.state.currentPage * this.state.dataPerPage;\n    const indexOfFirstData = indexOfLastData - this.state.dataPerPage;\n    this.setState({\n      currentData: this.state.tableCountries.slice(indexOfFirstData, indexOfLastData)\n    });\n  } //paginate = pageNumber=> this.setState({currentPage:pageNumber});\n\n\n  paginate(pageNumber) {\n    this.setState({\n      currentPage: pageNumber\n    });\n    this.updatePageNumber();\n  }\n\n  render() {\n    const {\n      currentData,\n      dataPerPage,\n      selectedCountry,\n      temp,\n      countries,\n      tableCountries,\n      width\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"mid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Container, {\n      fluid: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      className: \"justify-content-md-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      xs: \"12\",\n      lg: \"8\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"shadow-sm\",\n      style: {\n        marginBottom: '1rem',\n        padding: '1rem',\n        border: 'none'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Form.Control, {\n      as: \"select\",\n      size: \"sm\",\n      onChange: this.getCountry,\n      custom: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 33\n      }\n    }, selectedCountry), temp.map((items, i) => /*#__PURE__*/React.createElement(\"option\", {\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 33\n      }\n    }, items))))))), /*#__PURE__*/React.createElement(Container, {\n      fluid: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      className: \"justify-content-md-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      xs: true,\n      lg: \"8\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"shadow-sm\",\n      style: {\n        border: 'none'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        marginTop: '1rem'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"h5\", {\n      style: {\n        textAlign: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 33\n      }\n    }, selectedCountry, \"'s Data\")), /*#__PURE__*/React.createElement(AreaChart, {\n      width: width > 980 ? 960 : width - 48,\n      height: 500,\n      data: countries,\n      margin: {\n        top: 20,\n        right: 20,\n        left: 20,\n        bottom: 20\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(CartesianGrid, {\n      strokeDasharray: \"1 1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"date\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(YAxis, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(Tooltip, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(Legend, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(Area, {\n      type: \"monotone\",\n      dataKey: \"confirmed\",\n      dot: false,\n      stroke: colors.confirmed,\n      fill: colors.confirmed,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(Area, {\n      type: \"monotone\",\n      dataKey: \"recovered\",\n      dot: false,\n      stroke: colors.recovered,\n      fill: colors.recovered,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(Area, {\n      type: \"monotone\",\n      dataKey: \"deaths\",\n      dot: false,\n      stroke: colors.deaths,\n      fill: colors.deaths,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 29\n      }\n    })))))), /*#__PURE__*/React.createElement(Container, {\n      fluid: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      className: \"justify-content-md-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      xs: true,\n      lg: \"8\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"shadow-sm\",\n      style: {\n        marginTop: '1rem',\n        padding: '1rem',\n        border: 'none'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Table, {\n      responsive: true,\n      size: \"sm\",\n      striped: true,\n      bordered: true,\n      hover: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"thead\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 37\n      }\n    }, \"Date\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 37\n      }\n    }, \"Confirmed\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 37\n      }\n    }, \"Recovered\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 37\n      }\n    }, \"Deaths\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 33\n      }\n    }, currentData.map((list, index) => /*#__PURE__*/React.createElement(\"tr\", {\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 37\n      }\n    }, list.date), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(NumberFormat, {\n      value: list.confirmed,\n      displayType: 'text',\n      thousandSeparator: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 41\n      }\n    })), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(NumberFormat, {\n      value: list.recovered,\n      displayType: 'text',\n      thousandSeparator: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 41\n      }\n    })), /*#__PURE__*/React.createElement(\"td\", {\n      style: {\n        fontWeight: \"bold\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(NumberFormat, {\n      value: list.deaths,\n      displayType: 'text',\n      thousandSeparator: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 69\n      }\n    })))))), /*#__PURE__*/React.createElement(Pagination, {\n      dataPerPage: dataPerPage,\n      totalData: tableCountries.length,\n      paginate: this.paginate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 33\n      }\n    }))))));\n  }\n\n}\n\nexport default DataChart;","map":{"version":3,"sources":["/Users/shariati/Desktop/Projects/demo/src/components/dataChart.jsx"],"names":["React","Component","Axios","Container","Row","Col","Table","Form","Card","NumberFormat","AreaChart","XAxis","YAxis","CartesianGrid","Tooltip","Legend","Area","Pagination","colors","confirmed","recovered","deaths","DataChart","constructor","props","state","currentData","currentPage","dataPerPage","selectedCountry","temp","countries","tableCountries","width","window","innerWidth","document","documentElement","clientWidth","body","updateDimensions","setState","getCountry","bind","paginate","componentDidMount","getCountryByIP","addEventListener","res","get","data","country_name","getData","byConfirmed","China","slice","sort","a","b","Object","keys","indexOfLastData","indexOfFirstData","event","persist","countryRes","searchCountry","target","value","updatePageNumber","pageNumber","render","marginBottom","padding","border","map","items","i","marginTop","textAlign","top","right","left","bottom","list","index","date","fontWeight","length"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Axios from 'axios';\nimport {Container,Row,Col,Table,Form, Card} from 'react-bootstrap';\nimport NumberFormat from 'react-number-format';\nimport { AreaChart, XAxis,YAxis, CartesianGrid,Tooltip,Legend, Area} from 'recharts';\nimport Pagination from './pagination';\n\nconst colors = {\n    confirmed: 'hsla(27, 100%, 51%, 1)',\n    recovered: 'hsla(91, 100%, 51%, 1)',\n    deaths: 'hsla(0, 100%, 51%, 1)',\n  };\n\nclass DataChart extends Component{\n    constructor (props){\n        super(props);\n        this.getCountry=this.getCountry.bind(this);\n        this.paginate=this.paginate.bind(this);\n      }\n      \n      state={\n        currentData:[],\n        currentPage:1,\n        dataPerPage:7,\n        selectedCountry:\"China\",\n        temp:[],\n        countries:[],\n        tableCountries:[],\n        width:\n        window.innerWidth ||\n        document.documentElement.clientWidth ||\n        document.body.clientWidth\n      }\n      componentDidMount(){\n        this.getCountryByIP();\n        window.addEventListener('resize',this.updateDimensions);\n      }\n      updateDimensions = ()=>{\n          const width = \n          window.innerWidth ||\n          document.documentElement.clientWidth ||\n          document.body.clientWidth;\n\n          this.setState({width});\n      }\n      async getCountryByIP(){\n        const res=await Axios.get(\"https://ipapi.co/json\");\n        this.setState({\n            selectedCountry:res.data.country_name\n        })\n        this.getData();\n    }\n      async getData(){\n        const res=await Axios.get(\"https://pomber.github.io/covid19/timeseries.json\");\n        \n        const byConfirmed=res.data.China.slice(0);\n        byConfirmed.sort(function(a,b){\n            return b.confirmed - a.confirmed;\n        });\n\n        this.setState({\n          countries:res.data.China,\n          tableCountries:byConfirmed,\n          temp:Object.keys(res.data)\n        })\n\n        const indexOfLastData=this.state.currentPage * this.state.dataPerPage;\n        const indexOfFirstData=indexOfLastData - this.state.dataPerPage;\n        this.setState({\n            currentData:this.state.tableCountries.slice(indexOfFirstData,indexOfLastData)\n        })\n        \n      }\n      async getCountry(event){\n        event.persist();\n        const countryRes=await Axios.get(\"https://pomber.github.io/covid19/timeseries.json\");\n        const searchCountry=event.target.value;\n        \n        const byConfirmed=countryRes.data[searchCountry].slice(0);\n        byConfirmed.sort(function(a,b){\n            return b.confirmed - a.confirmed;\n        });\n\n        this.setState({\n            selectedCountry:searchCountry,\n            countries:countryRes.data[searchCountry],\n            tableCountries:byConfirmed\n        })\n        const indexOfLastData=this.state.currentPage * this.state.dataPerPage;\n        const indexOfFirstData=indexOfLastData - this.state.dataPerPage;\n        this.setState({\n            currentData:this.state.tableCountries.slice(indexOfFirstData,indexOfLastData)\n        })\n      }\n      async updatePageNumber(){\n        const countryRes=await Axios.get(\"https://pomber.github.io/covid19/timeseries.json\");\n        const searchCountry=this.state.selectedCountry;\n        \n        const byConfirmed=countryRes.data[searchCountry].slice(0);\n        byConfirmed.sort(function(a,b){\n            return b.confirmed - a.confirmed;\n        });\n\n        this.setState({\n            selectedCountry:searchCountry,\n            countries:countryRes.data[searchCountry],\n            tableCountries:byConfirmed\n        })\n        const indexOfLastData=this.state.currentPage * this.state.dataPerPage;\n        const indexOfFirstData=indexOfLastData - this.state.dataPerPage;\n        this.setState({\n            currentData:this.state.tableCountries.slice(indexOfFirstData,indexOfLastData)\n        })\n      }\n    //paginate = pageNumber=> this.setState({currentPage:pageNumber});\n        paginate(pageNumber){\n        this.setState({currentPage:pageNumber});\n        this.updatePageNumber();\n    }\n    \nrender(){\n    const {\n        currentData,\n        dataPerPage,\n        selectedCountry,\n        temp,\n        countries,\n        tableCountries,\n        width\n    } = this.state;\n    return(\n        <div className=\"mid\">\n            <Container fluid>\n                <Row className=\"justify-content-md-center\">\n                    <Col xs=\"12\" lg=\"8\">\n                    <Card className=\"shadow-sm\" style={{marginBottom:'1rem',padding:'1rem',border:'none'}}>\n                        <Form.Control as=\"select\" size=\"sm\" onChange={this.getCountry} custom>\n                                <option>{selectedCountry}</option> \n                                {\n                                temp.map((items,i)=>\n                                <option key={i}>{items}</option>  \n                                )\n                                }\n                            </Form.Control>\n                    </Card>     \n                    </Col>\n                </Row>\n            </Container>\n            \n            <Container fluid>\n                <Row className=\"justify-content-md-center\">\n                    <Col xs lg=\"8\">\n                        <Card className=\"shadow-sm\" style={{border:'none'}}>\n                            <div style={{marginTop:'1rem'}}>\n                                <h5 style={{textAlign:'center'}}>{selectedCountry}'s Data</h5>\n                            </div>\n                            <AreaChart \n                                width={ width > 980 ? 960 : width - 48 } \n                                height={500} \n                                data={countries} \n                                margin={{top: 20, right: 20, left: 20, bottom: 20}}\n                                >\n                            <CartesianGrid strokeDasharray=\"1 1\" />\n                            <XAxis dataKey=\"date\" />\n                            <YAxis />\n                            <Tooltip />\n                            <Legend/>\n                            <Area type=\"monotone\"  dataKey=\"confirmed\" dot={false}  stroke={colors.confirmed} fill={colors.confirmed} />\n                            <Area type=\"monotone\" dataKey=\"recovered\" dot={false} stroke={colors.recovered} fill={colors.recovered} />\n                            <Area type=\"monotone\" dataKey=\"deaths\" dot={false}  stroke={colors.deaths} fill={colors.deaths} />\n                            </AreaChart>\n                        </Card>\n                    </Col>\n                </Row>\n            </Container>\n            \n            <Container fluid>\n                <Row className=\"justify-content-md-center\">\n                    <Col xs lg=\"8\">\n                        <Card className=\"shadow-sm\" style={{marginTop:'1rem',padding:'1rem',border:'none'}}>\n                            <Table responsive size=\"sm\" striped={true} bordered={true} hover>\n                                <thead>\n                                    <tr>\n                                    <th>Date</th>\n                                    <th>Confirmed</th>\n                                    <th>Recovered</th>\n                                    <th>Deaths</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {\n                                    currentData.map((list,index)=>\n                                    <tr key={index}>\n                                    <td>{list.date}</td>\n                                    <td><NumberFormat value={list.confirmed} displayType={'text'} thousandSeparator={true} /></td>\n                                    <td><NumberFormat value={list.recovered} displayType={'text'} thousandSeparator={true} /></td>\n                                    <td style={{fontWeight:\"bold\"}}><NumberFormat value={list.deaths} displayType={'text'} thousandSeparator={true} /></td>\n                                    </tr>\n                                    )\n                                    }\n                                </tbody>\n                                </Table>\n                                <Pagination  dataPerPage={dataPerPage} totalData={tableCountries.length} paginate={this.paginate}/>\n                        </Card>\n                    \n                    </Col>\n                </Row>\n            </Container>\n            \n        </div>\n    )\n}\n}\nexport default DataChart;"]},"metadata":{},"sourceType":"module"}