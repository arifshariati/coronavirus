{"ast":null,"code":"var _jsxFileName = \"/Users/shariati/Desktop/Projects/demo2/src/components/dataChartOnly.jsx\";\nimport React, { Component } from 'react';\nimport Axios from 'axios';\nimport { Container, Row, Col, Table, Form, Card } from 'react-bootstrap';\nimport NumberFormat from 'react-number-format';\nimport { AreaChart, XAxis, YAxis, CartesianGrid, Tooltip, Legend, Area } from 'recharts';\nimport ReactGA from 'react-ga';\nimport Loader from 'react-loader-spinner';\nconst colors = {\n  confirmed: '#FFD31D',\n  recovered: '#21BF72',\n  deaths: '#DD2C00'\n};\nconst showChartPeriod = [{\n  period: 7,\n  periodTitle: \"Last 7 Days\"\n}, {\n  period: 14,\n  periodTitle: \"Last 14 Days\"\n}, {\n  period: 30,\n  periodTitle: \"Last 30 Days\"\n}, {\n  period: 0,\n  periodTitle: \"All Data\"\n}];\n\nclass DataChartOnly extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentData: [],\n      currentPage: 1,\n      dataPerPage: 7,\n      selectedCountry: \"China\",\n      population: 0,\n      temp: [],\n      countries: [],\n      tableCountries: [],\n      chartPeriod: 7,\n      width: window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth\n    };\n\n    this.updateDimensions = () => {\n      const width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n      this.setState({\n        width\n      });\n    };\n\n    this.getData = this.getData.bind(this);\n    this.getCountry = this.getCountry.bind(this);\n  }\n\n  componentDidMount() {\n    ReactGA.initialize('UA-163115935-1');\n    ReactGA.pageview('/Data-Visualization');\n    this.getCountryByIP();\n    window.addEventListener('resize', this.updateDimensions);\n  }\n\n  async getCountryByIP() {\n    const res = await Axios.get(\"https://ipapi.co/json\");\n    this.setState({\n      selectedCountry: res.data.country_name === \"United States\" ? \"US\" : res.data.country_name,\n      population: res.data.country_population\n    });\n    this.getData();\n  }\n\n  async getData() {\n    const selectedCountry = this.state.selectedCountry;\n    const res = await Axios.get(\"https://pomber.github.io/covid19/timeseries.json\");\n    const byConfirmed = res.data[selectedCountry];\n    byConfirmed.sort(function (a, b) {\n      return a.confirmed - b.confirmed;\n    });\n    const indexOfLastData = res.data[selectedCountry].length;\n    const indexOfFirstData = indexOfLastData - this.state.chartPeriod; //console.log(indexOfLastData);\n\n    this.setState({\n      countries: res.data[selectedCountry].slice(indexOfFirstData, indexOfLastData),\n      tableCountries: byConfirmed,\n      temp: Object.keys(res.data)\n    });\n  }\n\n  async getCountry(event) {\n    event.persist();\n    const countryRes = await Axios.get(\"https://pomber.github.io/covid19/timeseries.json\");\n    const searchCountry = event.target.value;\n    const byConfirmed = countryRes.data[searchCountry].slice(0);\n    byConfirmed.sort(function (a, b) {\n      return b.confirmed - a.confirmed;\n    });\n    const indexOfLastData = countryRes.data[searchCountry].length;\n    const indexOfFirstData = indexOfLastData - this.state.chartPeriod;\n    this.setState({\n      selectedCountry: searchCountry,\n      countries: countryRes.data[searchCountry].slice(indexOfFirstData, indexOfLastData),\n      tableCountries: byConfirmed\n    });\n  }\n\n  render() {\n    const {\n      selectedCountry,\n      population,\n      temp,\n      countries,\n      width\n    } = this.state;\n    if (!countries) return /*#__PURE__*/React.createElement(Container, {\n      fluid: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      className: \"justify-content-md-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      xs: \"12\",\n      lg: \"8\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"shadow\",\n      style: {\n        marginBottom: '1rem',\n        paddingTop: '15rem',\n        border: 'none',\n        minHeight: \"700px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Loader, {\n      type: \"ThreeDots\",\n      color: \"#DD2C00\",\n      height: 100,\n      width: 100,\n      timeout: 9000000000,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 21\n      }\n    })))));\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"mid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Container, {\n      fluid: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      className: \"justify-content-md-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      xs: \"12\",\n      lg: \"8\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"shadow-sm\",\n      style: {\n        marginBottom: '1rem',\n        padding: '1rem',\n        border: 'none'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Form.Control, {\n      as: \"select\",\n      size: \"sm\",\n      onChange: this.getCountry,\n      custom: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 33\n      }\n    }, selectedCountry), temp.map((items, i) => /*#__PURE__*/React.createElement(\"option\", {\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 33\n      }\n    }, items)))))), /*#__PURE__*/React.createElement(Row, {\n      className: \"justify-content-md-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      xs: \"12\",\n      lg: \"8\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"shadow-sm\",\n      style: {\n        marginBottom: '1rem',\n        padding: '1rem',\n        border: 'none'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Form.Control, {\n      as: \"select\",\n      size: \"sm\",\n      onChange: this.updateChartPeriod,\n      custom: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 33\n      }\n    }, \"Select Chart Period\"), showChartPeriod.map((items, period) => /*#__PURE__*/React.createElement(\"option\", {\n      key: items.period,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 33\n      }\n    }, items.periodTitle))))))), /*#__PURE__*/React.createElement(Container, {\n      fluid: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      className: \"justify-content-md-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      xs: true,\n      lg: \"8\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"shadow-sm\",\n      style: {\n        border: 'none'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        marginTop: '1rem'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"h5\", {\n      style: {\n        textAlign: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 33\n      }\n    }, selectedCountry, \"'s Data\")), /*#__PURE__*/React.createElement(AreaChart, {\n      width: width > 980 ? 1200 : width - 80,\n      height: 300,\n      data: countries,\n      margin: {\n        top: 20,\n        right: 20,\n        left: 20,\n        bottom: 20\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(CartesianGrid, {\n      strokeDasharray: \"1 1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"date\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(YAxis, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(Tooltip, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(Legend, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(Area, {\n      type: \"monotone\",\n      dataKey: \"confirmed\",\n      dot: false,\n      stroke: colors.confirmed,\n      fill: colors.confirmed,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(Area, {\n      type: \"monotone\",\n      dataKey: \"recovered\",\n      dot: false,\n      stroke: colors.recovered,\n      fill: colors.recovered,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(Area, {\n      type: \"monotone\",\n      dataKey: \"deaths\",\n      dot: false,\n      stroke: colors.deaths,\n      fill: colors.deaths,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 29\n      }\n    })))))), /*#__PURE__*/React.createElement(Container, {\n      fluid: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      className: \"justify-content-md-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      xs: true,\n      lg: \"8\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"shadow-sm\",\n      style: {\n        border: 'none',\n        marginTop: '1rem'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      className: \"justify-content-md-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(AreaChart, {\n      width: width > 980 ? 480 : width > 720 ? width / 2 - 80 : width - 80,\n      height: 250,\n      data: countries,\n      margin: {\n        top: 20,\n        right: 20,\n        left: 20,\n        bottom: 20\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(CartesianGrid, {\n      strokeDasharray: \"1 1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"date\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(YAxis, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(Tooltip, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(Legend, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(Area, {\n      type: \"monotone\",\n      dataKey: \"confirmed\",\n      dot: false,\n      stroke: colors.confirmed,\n      fill: colors.confirmed,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 37\n      }\n    }))), /*#__PURE__*/React.createElement(Col, {\n      style: {\n        textAlign: 'right'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        marginTop: '2rem',\n        marginRight: '5rem'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 41\n      }\n    }, \"As of available data\"), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(NumberFormat, {\n      value: countries && countries[countries.length - 1] && countries[countries.length - 1].confirmed,\n      displayType: 'text',\n      thousandSeparator: true,\n      style: {\n        color: colors.confirmed\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 41\n      }\n    })), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 41\n      }\n    }, \"Confirmed cases have been Registered\")))))))), /*#__PURE__*/React.createElement(Container, {\n      fluid: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      className: \"justify-content-md-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      xs: true,\n      lg: \"8\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"shadow-sm\",\n      style: {\n        border: 'none',\n        marginTop: '1rem'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      className: \"justify-content-md-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(AreaChart, {\n      width: width > 980 ? 480 : width > 720 ? width / 2 - 80 : width - 80,\n      height: 250,\n      data: countries,\n      margin: {\n        top: 20,\n        right: 20,\n        left: 20,\n        bottom: 20\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(CartesianGrid, {\n      strokeDasharray: \"1 1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"date\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(YAxis, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(Tooltip, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(Legend, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(Area, {\n      type: \"monotone\",\n      dataKey: \"recovered\",\n      dot: false,\n      stroke: colors.recovered,\n      fill: colors.recovered,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 37\n      }\n    }))), /*#__PURE__*/React.createElement(Col, {\n      style: {\n        textAlign: 'right'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        marginTop: '2rem',\n        marginRight: '5rem'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 41\n      }\n    }, \"As of available data\"), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(NumberFormat, {\n      value: countries && countries[countries.length - 1] && countries[countries.length - 1].recovered,\n      displayType: 'text',\n      thousandSeparator: true,\n      style: {\n        color: colors.recovered\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 41\n      }\n    })), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 41\n      }\n    }, \"Recovered cases have been Registered with\"), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(NumberFormat, {\n      value: countries && countries[0] && Math.round(countries[countries.length - 1].recovered / countries[countries.length - 1].confirmed * 100),\n      displayType: 'text',\n      thousandSeparator: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 41\n      }\n    }), \" %\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 41\n      }\n    }, \"Recovery rate\")))))))), /*#__PURE__*/React.createElement(Container, {\n      fluid: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      className: \"justify-content-md-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      xs: true,\n      lg: \"8\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"shadow-sm\",\n      style: {\n        border: 'none',\n        marginTop: '1rem'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      className: \"justify-content-md-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(AreaChart, {\n      width: width > 980 ? 480 : width > 720 ? width / 2 - 80 : width - 80,\n      height: 250,\n      data: countries,\n      margin: {\n        top: 20,\n        right: 20,\n        left: 20,\n        bottom: 20\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(CartesianGrid, {\n      strokeDasharray: \"1 1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"date\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(YAxis, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(Tooltip, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(Legend, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(Area, {\n      type: \"monotone\",\n      dataKey: \"deaths\",\n      dot: false,\n      stroke: colors.deaths,\n      fill: colors.deaths,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 37\n      }\n    }))), /*#__PURE__*/React.createElement(Col, {\n      style: {\n        textAlign: 'right'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        marginTop: '2rem',\n        marginRight: '5rem'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 41\n      }\n    }, \"As of available data\"), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(NumberFormat, {\n      value: countries && countries[countries.length - 1] && countries[countries.length - 1].deaths,\n      displayType: 'text',\n      thousandSeparator: true,\n      style: {\n        color: colors.deaths\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 41\n      }\n    })), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 41\n      }\n    }, \"Death cases have been Registered with\"), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(NumberFormat, {\n      value: countries && countries[countries.length - 1] && Math.round(countries[countries.length - 1].deaths / countries[countries.length - 1].confirmed * 100),\n      displayType: 'text',\n      thousandSeparator: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 41\n      }\n    }), \"%\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 41\n      }\n    }, \" Death rate\")))))))));\n  }\n\n}\n\nexport default DataChartOnly;","map":{"version":3,"sources":["/Users/shariati/Desktop/Projects/demo2/src/components/dataChartOnly.jsx"],"names":["React","Component","Axios","Container","Row","Col","Table","Form","Card","NumberFormat","AreaChart","XAxis","YAxis","CartesianGrid","Tooltip","Legend","Area","ReactGA","Loader","colors","confirmed","recovered","deaths","showChartPeriod","period","periodTitle","DataChartOnly","constructor","props","state","currentData","currentPage","dataPerPage","selectedCountry","population","temp","countries","tableCountries","chartPeriod","width","window","innerWidth","document","documentElement","clientWidth","body","updateDimensions","setState","getData","bind","getCountry","componentDidMount","initialize","pageview","getCountryByIP","addEventListener","res","get","data","country_name","country_population","byConfirmed","sort","a","b","indexOfLastData","length","indexOfFirstData","slice","Object","keys","event","persist","countryRes","searchCountry","target","value","render","marginBottom","paddingTop","border","minHeight","padding","map","items","i","updateChartPeriod","marginTop","textAlign","top","right","left","bottom","marginRight","color","Math","round"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,SAAR,EAAkBC,GAAlB,EAAsBC,GAAtB,EAA0BC,KAA1B,EAAgCC,IAAhC,EAAsCC,IAAtC,QAAiD,iBAAjD;AACA,OAAOC,YAAP,MAAyB,qBAAzB;AACA,SAASC,SAAT,EAAoBC,KAApB,EAA0BC,KAA1B,EAAiCC,aAAjC,EAA+CC,OAA/C,EAAuDC,MAAvD,EAA+DC,IAA/D,QAA0E,UAA1E;AACA,OAAOC,OAAP,MAAoB,UAApB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AAEA,MAAMC,MAAM,GAAG;AACXC,EAAAA,SAAS,EAAE,SADA;AAEXC,EAAAA,SAAS,EAAE,SAFA;AAGXC,EAAAA,MAAM,EAAE;AAHG,CAAf;AAKA,MAAMC,eAAe,GAAC,CAClB;AACIC,EAAAA,MAAM,EAAC,CADX;AAEIC,EAAAA,WAAW,EAAC;AAFhB,CADkB,EAKlB;AACID,EAAAA,MAAM,EAAC,EADX;AAEIC,EAAAA,WAAW,EAAC;AAFhB,CALkB,EASlB;AACID,EAAAA,MAAM,EAAC,EADX;AAEIC,EAAAA,WAAW,EAAC;AAFhB,CATkB,EAalB;AACID,EAAAA,MAAM,EAAC,CADX;AAEIC,EAAAA,WAAW,EAAC;AAFhB,CAbkB,CAAtB;;AAmBA,MAAMC,aAAN,SAA4BzB,SAA5B,CAAqC;AACjC0B,EAAAA,WAAW,CAAEC,KAAF,EAAQ;AACf,UAAMA,KAAN;AADe,SAMjBC,KANiB,GAMX;AACJC,MAAAA,WAAW,EAAC,EADR;AAEJC,MAAAA,WAAW,EAAC,CAFR;AAGJC,MAAAA,WAAW,EAAC,CAHR;AAIJC,MAAAA,eAAe,EAAC,OAJZ;AAKJC,MAAAA,UAAU,EAAC,CALP;AAMJC,MAAAA,IAAI,EAAC,EAND;AAOJC,MAAAA,SAAS,EAAC,EAPN;AAQJC,MAAAA,cAAc,EAAC,EARX;AASJC,MAAAA,WAAW,EAAC,CATR;AAUJC,MAAAA,KAAK,EACLC,MAAM,CAACC,UAAP,IACAC,QAAQ,CAACC,eAAT,CAAyBC,WADzB,IAEAF,QAAQ,CAACG,IAAT,CAAcD;AAbV,KANW;;AAAA,SA6BjBE,gBA7BiB,GA6BE,MAAI;AACnB,YAAMP,KAAK,GACXC,MAAM,CAACC,UAAP,IACAC,QAAQ,CAACC,eAAT,CAAyBC,WADzB,IAEAF,QAAQ,CAACG,IAAT,CAAcD,WAHd;AAKA,WAAKG,QAAL,CAAc;AAACR,QAAAA;AAAD,OAAd;AACH,KApCgB;;AAEf,SAAKS,OAAL,GAAa,KAAKA,OAAL,CAAaC,IAAb,CAAkB,IAAlB,CAAb;AACA,SAAKC,UAAL,GAAgB,KAAKA,UAAL,CAAgBD,IAAhB,CAAqB,IAArB,CAAhB;AACD;;AAiBDE,EAAAA,iBAAiB,GAAE;AAEjBlC,IAAAA,OAAO,CAACmC,UAAR,CAAmB,gBAAnB;AACAnC,IAAAA,OAAO,CAACoC,QAAR,CAAiB,qBAAjB;AAEA,SAAKC,cAAL;AACAd,IAAAA,MAAM,CAACe,gBAAP,CAAwB,QAAxB,EAAiC,KAAKT,gBAAtC;AACD;;AASD,QAAMQ,cAAN,GAAsB;AAClB,UAAME,GAAG,GAAC,MAAMtD,KAAK,CAACuD,GAAN,CAAU,uBAAV,CAAhB;AAEA,SAAKV,QAAL,CAAc;AACVd,MAAAA,eAAe,EAACuB,GAAG,CAACE,IAAJ,CAASC,YAAT,KAAyB,eAAzB,GAA2C,IAA3C,GAAkDH,GAAG,CAACE,IAAJ,CAASC,YADjE;AAEVzB,MAAAA,UAAU,EAACsB,GAAG,CAACE,IAAJ,CAASE;AAFV,KAAd;AAIA,SAAKZ,OAAL;AACH;;AACD,QAAMA,OAAN,GAAe;AACb,UAAMf,eAAe,GAAC,KAAKJ,KAAL,CAAWI,eAAjC;AACA,UAAMuB,GAAG,GAAC,MAAMtD,KAAK,CAACuD,GAAN,CAAU,kDAAV,CAAhB;AAEA,UAAMI,WAAW,GAACL,GAAG,CAACE,IAAJ,CAASzB,eAAT,CAAlB;AACA4B,IAAAA,WAAW,CAACC,IAAZ,CAAiB,UAASC,CAAT,EAAWC,CAAX,EAAa;AAC1B,aAAOD,CAAC,CAAC3C,SAAF,GAAc4C,CAAC,CAAC5C,SAAvB;AACH,KAFD;AAIA,UAAM6C,eAAe,GAAET,GAAG,CAACE,IAAJ,CAASzB,eAAT,EAA0BiC,MAAjD;AACA,UAAMC,gBAAgB,GAACF,eAAe,GAAG,KAAKpC,KAAL,CAAWS,WAApD,CAVa,CAWb;;AACA,SAAKS,QAAL,CAAc;AACZX,MAAAA,SAAS,EAACoB,GAAG,CAACE,IAAJ,CAASzB,eAAT,EAA0BmC,KAA1B,CAAgCD,gBAAhC,EAAiDF,eAAjD,CADE;AAEZ5B,MAAAA,cAAc,EAACwB,WAFH;AAGZ1B,MAAAA,IAAI,EAACkC,MAAM,CAACC,IAAP,CAAYd,GAAG,CAACE,IAAhB;AAHO,KAAd;AAKD;;AACD,QAAMR,UAAN,CAAiBqB,KAAjB,EAAuB;AACrBA,IAAAA,KAAK,CAACC,OAAN;AACA,UAAMC,UAAU,GAAC,MAAMvE,KAAK,CAACuD,GAAN,CAAU,kDAAV,CAAvB;AACA,UAAMiB,aAAa,GAACH,KAAK,CAACI,MAAN,CAAaC,KAAjC;AAEA,UAAMf,WAAW,GAACY,UAAU,CAACf,IAAX,CAAgBgB,aAAhB,EAA+BN,KAA/B,CAAqC,CAArC,CAAlB;AACAP,IAAAA,WAAW,CAACC,IAAZ,CAAiB,UAASC,CAAT,EAAWC,CAAX,EAAa;AAC1B,aAAOA,CAAC,CAAC5C,SAAF,GAAc2C,CAAC,CAAC3C,SAAvB;AACH,KAFD;AAIA,UAAM6C,eAAe,GAAEQ,UAAU,CAACf,IAAX,CAAgBgB,aAAhB,EAA+BR,MAAtD;AACA,UAAMC,gBAAgB,GAACF,eAAe,GAAG,KAAKpC,KAAL,CAAWS,WAApD;AAEA,SAAKS,QAAL,CAAc;AACVd,MAAAA,eAAe,EAACyC,aADN;AAEVtC,MAAAA,SAAS,EAACqC,UAAU,CAACf,IAAX,CAAgBgB,aAAhB,EAA+BN,KAA/B,CAAqCD,gBAArC,EAAsDF,eAAtD,CAFA;AAGV5B,MAAAA,cAAc,EAACwB;AAHL,KAAd;AAMD;;AAEPgB,EAAAA,MAAM,GAAE;AACJ,UAAM;AACF5C,MAAAA,eADE;AAEFC,MAAAA,UAFE;AAGFC,MAAAA,IAHE;AAIFC,MAAAA,SAJE;AAKFG,MAAAA;AALE,QAMF,KAAKV,KANT;AAQA,QAAG,CAACO,SAAJ,EAAe,oBACX,oBAAC,SAAD;AAAW,MAAA,KAAK,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAC,2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAC,IAAR;AAAa,MAAA,EAAE,EAAC,GAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA,oBAAC,IAAD;AACI,MAAA,SAAS,EAAC,QADd;AAEI,MAAA,KAAK,EAAE;AAAC0C,QAAAA,YAAY,EAAC,MAAd;AAAqBC,QAAAA,UAAU,EAAC,OAAhC;AAAwCC,QAAAA,MAAM,EAAC,MAA/C;AAAsDC,QAAAA,SAAS,EAAC;AAAhE,OAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAII,oBAAC,MAAD;AACI,MAAA,IAAI,EAAC,WADT;AAEI,MAAA,KAAK,EAAC,SAFV;AAGI,MAAA,MAAM,EAAE,GAHZ;AAII,MAAA,KAAK,EAAE,GAJX;AAKI,MAAA,OAAO,EAAE,UALb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,CADA,CADJ,CADJ,CADW;AAoBf,wBACI;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,SAAD;AAAW,MAAA,KAAK,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAC,2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAC,IAAR;AAAa,MAAA,EAAE,EAAC,GAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAC,WAAhB;AAA4B,MAAA,KAAK,EAAE;AAACH,QAAAA,YAAY,EAAC,MAAd;AAAqBI,QAAAA,OAAO,EAAC,MAA7B;AAAoCF,QAAAA,MAAM,EAAC;AAA3C,OAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD,CAAM,OAAN;AAAc,MAAA,EAAE,EAAC,QAAjB;AAA0B,MAAA,IAAI,EAAC,IAA/B;AAAoC,MAAA,QAAQ,EAAE,KAAK9B,UAAnD;AAA+D,MAAA,MAAM,MAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAASjB,eAAT,CADR,EAGQE,IAAI,CAACgD,GAAL,CAAS,CAACC,KAAD,EAAOC,CAAP,kBACT;AAAQ,MAAA,GAAG,EAAEA,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAiBD,KAAjB,CADA,CAHR,CADJ,CADA,CADJ,CADJ,eAgBI,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAC,2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAC,IAAR;AAAa,MAAA,EAAE,EAAC,GAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAC,WAAhB;AAA4B,MAAA,KAAK,EAAE;AAACN,QAAAA,YAAY,EAAC,MAAd;AAAqBI,QAAAA,OAAO,EAAC,MAA7B;AAAoCF,QAAAA,MAAM,EAAC;AAA3C,OAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD,CAAM,OAAN;AAAc,MAAA,EAAE,EAAC,QAAjB;AAA0B,MAAA,IAAI,EAAC,IAA/B;AAAoC,MAAA,QAAQ,EAAE,KAAKM,iBAAnD;AAAsE,MAAA,MAAM,MAA5E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BADR,EAGQ/D,eAAe,CAAC4D,GAAhB,CAAoB,CAACC,KAAD,EAAO5D,MAAP,kBACpB;AAAQ,MAAA,GAAG,EAAE4D,KAAK,CAAC5D,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA4B4D,KAAK,CAAC3D,WAAlC,CADA,CAHR,CADJ,CADA,CADJ,CAhBJ,CADJ,eAiCI,oBAAC,SAAD;AAAW,MAAA,KAAK,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAC,2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,EAAE,MAAP;AAAQ,MAAA,EAAE,EAAC,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAC,WAAhB;AAA4B,MAAA,KAAK,EAAE;AAACuD,QAAAA,MAAM,EAAC;AAAR,OAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,KAAK,EAAE;AAACO,QAAAA,SAAS,EAAC;AAAX,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAI,MAAA,KAAK,EAAE;AAACC,QAAAA,SAAS,EAAC;AAAX,OAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAkCvD,eAAlC,YADJ,CADJ,eAII,oBAAC,SAAD;AACI,MAAA,KAAK,EAAGM,KAAK,GAAG,GAAR,GAAc,IAAd,GAAqBA,KAAK,GAAG,EADzC;AAEI,MAAA,MAAM,EAAE,GAFZ;AAGI,MAAA,IAAI,EAAEH,SAHV;AAII,MAAA,MAAM,EAAE;AAACqD,QAAAA,GAAG,EAAE,EAAN;AAAUC,QAAAA,KAAK,EAAE,EAAjB;AAAqBC,QAAAA,IAAI,EAAE,EAA3B;AAA+BC,QAAAA,MAAM,EAAE;AAAvC,OAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAMA,oBAAC,aAAD;AAAe,MAAA,eAAe,EAAC,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANA,eAOA,oBAAC,KAAD;AAAO,MAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPA,eAQA,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARA,eASA,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATA,eAUA,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVA,eAWA,oBAAC,IAAD;AAAM,MAAA,IAAI,EAAC,UAAX;AAAuB,MAAA,OAAO,EAAC,WAA/B;AAA2C,MAAA,GAAG,EAAE,KAAhD;AAAwD,MAAA,MAAM,EAAEzE,MAAM,CAACC,SAAvE;AAAkF,MAAA,IAAI,EAAED,MAAM,CAACC,SAA/F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXA,eAYA,oBAAC,IAAD;AAAM,MAAA,IAAI,EAAC,UAAX;AAAsB,MAAA,OAAO,EAAC,WAA9B;AAA0C,MAAA,GAAG,EAAE,KAA/C;AAAsD,MAAA,MAAM,EAAED,MAAM,CAACE,SAArE;AAAgF,MAAA,IAAI,EAAEF,MAAM,CAACE,SAA7F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAZA,eAaA,oBAAC,IAAD;AAAM,MAAA,IAAI,EAAC,UAAX;AAAsB,MAAA,OAAO,EAAC,QAA9B;AAAuC,MAAA,GAAG,EAAE,KAA5C;AAAoD,MAAA,MAAM,EAAEF,MAAM,CAACG,MAAnE;AAA2E,MAAA,IAAI,EAAEH,MAAM,CAACG,MAAxF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAbA,CAJJ,CADJ,CADJ,CADJ,CAjCJ,eA4DI,oBAAC,SAAD;AAAW,MAAA,KAAK,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAC,2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,EAAE,MAAP;AAAQ,MAAA,EAAE,EAAC,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAC,WAAhB;AAA4B,MAAA,KAAK,EAAE;AAAC0D,QAAAA,MAAM,EAAC,MAAR;AAAeO,QAAAA,SAAS,EAAC;AAAzB,OAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAC,2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,SAAD;AACI,MAAA,KAAK,EACDhD,KAAK,GAAG,GAAR,GACE,GADF,GAEEA,KAAK,GAAG,GAAR,GACAA,KAAK,GAAG,CAAR,GAAY,EADZ,GAEAA,KAAK,GAAG,EANlB;AAQI,MAAA,MAAM,EAAE,GARZ;AASI,MAAA,IAAI,EAAEH,SATV;AAUI,MAAA,MAAM,EAAE;AAACqD,QAAAA,GAAG,EAAE,EAAN;AAAUC,QAAAA,KAAK,EAAE,EAAjB;AAAqBC,QAAAA,IAAI,EAAE,EAA3B;AAA+BC,QAAAA,MAAM,EAAE;AAAvC,OAVZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAYA,oBAAC,aAAD;AAAe,MAAA,eAAe,EAAC,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAZA,eAaA,oBAAC,KAAD;AAAO,MAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAbA,eAcA,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAdA,eAeA,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAfA,eAgBA,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAhBA,eAiBA,oBAAC,IAAD;AAAM,MAAA,IAAI,EAAC,UAAX;AAAuB,MAAA,OAAO,EAAC,WAA/B;AAA2C,MAAA,GAAG,EAAE,KAAhD;AAAwD,MAAA,MAAM,EAAEzE,MAAM,CAACC,SAAvE;AAAkF,MAAA,IAAI,EAAED,MAAM,CAACC,SAA/F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAjBA,CADJ,CADJ,eAsBI,oBAAC,GAAD;AAAK,MAAA,KAAK,EAAE;AAACoE,QAAAA,SAAS,EAAC;AAAX,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,KAAK,EAAE;AAACD,QAAAA,SAAS,EAAC,MAAX;AAAkBM,QAAAA,WAAW,EAAC;AAA9B,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA,oBAAC,YAAD;AACA,MAAA,KAAK,EACDzD,SAAS,IACTA,SAAS,CAACA,SAAS,CAAC8B,MAAV,GAAiB,CAAlB,CADT,IAEA9B,SAAS,CAACA,SAAS,CAAC8B,MAAV,GAAiB,CAAlB,CAAT,CAA8B9C,SAJlC;AAMA,MAAA,WAAW,EAAE,MANb;AAOA,MAAA,iBAAiB,EAAE,IAPnB;AAQA,MAAA,KAAK,EAAE;AAAC0E,QAAAA,KAAK,EAAC3E,MAAM,CAACC;AAAd,OARP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,CAFJ,eAcI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CAdJ,CADJ,CAtBJ,CADJ,CADJ,CADJ,CADJ,CA5DJ,eA6GI,oBAAC,SAAD;AAAW,MAAA,KAAK,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAC,2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,EAAE,MAAP;AAAQ,MAAA,EAAE,EAAC,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAC,WAAhB;AAA4B,MAAA,KAAK,EAAE;AAAC4D,QAAAA,MAAM,EAAC,MAAR;AAAeO,QAAAA,SAAS,EAAC;AAAzB,OAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAC,2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,SAAD;AACI,MAAA,KAAK,EACDhD,KAAK,GAAG,GAAR,GACE,GADF,GAEEA,KAAK,GAAG,GAAR,GACAA,KAAK,GAAG,CAAR,GAAY,EADZ,GAEAA,KAAK,GAAG,EANlB;AAQI,MAAA,MAAM,EAAE,GARZ;AASI,MAAA,IAAI,EAAEH,SATV;AAUI,MAAA,MAAM,EAAE;AAACqD,QAAAA,GAAG,EAAE,EAAN;AAAUC,QAAAA,KAAK,EAAE,EAAjB;AAAqBC,QAAAA,IAAI,EAAE,EAA3B;AAA+BC,QAAAA,MAAM,EAAE;AAAvC,OAVZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAYA,oBAAC,aAAD;AAAe,MAAA,eAAe,EAAC,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAZA,eAaA,oBAAC,KAAD;AAAO,MAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAbA,eAcA,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAdA,eAeA,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAfA,eAgBA,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAhBA,eAiBA,oBAAC,IAAD;AAAM,MAAA,IAAI,EAAC,UAAX;AAAsB,MAAA,OAAO,EAAC,WAA9B;AAA0C,MAAA,GAAG,EAAE,KAA/C;AAAsD,MAAA,MAAM,EAAEzE,MAAM,CAACE,SAArE;AAAgF,MAAA,IAAI,EAAEF,MAAM,CAACE,SAA7F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAjBA,CADJ,CADJ,eAsBI,oBAAC,GAAD;AAAK,MAAA,KAAK,EAAE;AAACmE,QAAAA,SAAS,EAAC;AAAX,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA;AAAK,MAAA,KAAK,EAAE;AAACD,QAAAA,SAAS,EAAC,MAAX;AAAkBM,QAAAA,WAAW,EAAC;AAA9B,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BADR,eAEQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA,oBAAC,YAAD;AACA,MAAA,KAAK,EACDzD,SAAS,IACTA,SAAS,CAACA,SAAS,CAAC8B,MAAV,GAAiB,CAAlB,CADT,IAEA9B,SAAS,CAACA,SAAS,CAAC8B,MAAV,GAAiB,CAAlB,CAAT,CAA8B7C,SAJlC;AAMA,MAAA,WAAW,EAAE,MANb;AAOA,MAAA,iBAAiB,EAAE,IAPnB;AAQA,MAAA,KAAK,EAAE;AAACyE,QAAAA,KAAK,EAAC3E,MAAM,CAACE;AAAd,OARP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,CAFR,eAcQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mDAdR,eAeQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA,oBAAC,YAAD;AACA,MAAA,KAAK,EACDe,SAAS,IACTA,SAAS,CAAC,CAAD,CADT,IAEA2D,IAAI,CAACC,KAAL,CACK5D,SAAS,CAACA,SAAS,CAAC8B,MAAV,GAAiB,CAAlB,CAAT,CAA8B7C,SAA9B,GAA0Ce,SAAS,CAACA,SAAS,CAAC8B,MAAV,GAAiB,CAAlB,CAAT,CAA8B9C,SAAzE,GAAsF,GAD1F,CAJJ;AAQA,MAAA,WAAW,EAAE,MARb;AASA,MAAA,iBAAiB,EAAE,IATnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,OAfR,eA4BQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBA5BR,CADA,CAtBJ,CADJ,CADJ,CADJ,CADJ,CA7GJ,eA4KI,oBAAC,SAAD;AAAW,MAAA,KAAK,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAC,2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,EAAE,MAAP;AAAQ,MAAA,EAAE,EAAC,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAC,WAAhB;AAA4B,MAAA,KAAK,EAAE;AAAC4D,QAAAA,MAAM,EAAC,MAAR;AAAeO,QAAAA,SAAS,EAAC;AAAzB,OAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAC,2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,SAAD;AACI,MAAA,KAAK,EACDhD,KAAK,GAAG,GAAR,GACE,GADF,GAEEA,KAAK,GAAG,GAAR,GACAA,KAAK,GAAG,CAAR,GAAY,EADZ,GAEAA,KAAK,GAAG,EANlB;AAQI,MAAA,MAAM,EAAE,GARZ;AASI,MAAA,IAAI,EAAEH,SATV;AAUI,MAAA,MAAM,EAAE;AAACqD,QAAAA,GAAG,EAAE,EAAN;AAAUC,QAAAA,KAAK,EAAE,EAAjB;AAAqBC,QAAAA,IAAI,EAAE,EAA3B;AAA+BC,QAAAA,MAAM,EAAE;AAAvC,OAVZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAYA,oBAAC,aAAD;AAAe,MAAA,eAAe,EAAC,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAZA,eAaA,oBAAC,KAAD;AAAO,MAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAbA,eAcA,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAdA,eAeA,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAfA,eAgBA,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAhBA,eAiBA,oBAAC,IAAD;AAAM,MAAA,IAAI,EAAC,UAAX;AAAsB,MAAA,OAAO,EAAC,QAA9B;AAAuC,MAAA,GAAG,EAAE,KAA5C;AAAoD,MAAA,MAAM,EAAEzE,MAAM,CAACG,MAAnE;AAA2E,MAAA,IAAI,EAAEH,MAAM,CAACG,MAAxF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAjBA,CADJ,CADJ,eAsBI,oBAAC,GAAD;AAAK,MAAA,KAAK,EAAE;AAACkE,QAAAA,SAAS,EAAC;AAAX,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,KAAK,EAAE;AAACD,QAAAA,SAAS,EAAC,MAAX;AAAkBM,QAAAA,WAAW,EAAC;AAA9B,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA,oBAAC,YAAD;AACA,MAAA,KAAK,EACDzD,SAAS,IACTA,SAAS,CAACA,SAAS,CAAC8B,MAAV,GAAiB,CAAlB,CADT,IAEA9B,SAAS,CAACA,SAAS,CAAC8B,MAAV,GAAiB,CAAlB,CAAT,CAA8B5C,MAJlC;AAMA,MAAA,WAAW,EAAE,MANb;AAOA,MAAA,iBAAiB,EAAE,IAPnB;AAQA,MAAA,KAAK,EAAE;AAACwE,QAAAA,KAAK,EAAC3E,MAAM,CAACG;AAAd,OARP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,CAFJ,eAcI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAdJ,eAeI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA,oBAAC,YAAD;AACA,MAAA,KAAK,EACDc,SAAS,IACTA,SAAS,CAACA,SAAS,CAAC8B,MAAV,GAAiB,CAAlB,CADT,IAEA6B,IAAI,CAACC,KAAL,CACK5D,SAAS,CAACA,SAAS,CAAC8B,MAAV,GAAiB,CAAlB,CAAT,CAA8B5C,MAA9B,GAAuCc,SAAS,CAACA,SAAS,CAAC8B,MAAV,GAAiB,CAAlB,CAAT,CAA8B9C,SAAtE,GAAmF,GADvF,CAJJ;AAQA,MAAA,WAAW,EAAE,MARb;AASA,MAAA,iBAAiB,EAAE,IATnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,MAfJ,eA4BI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBA5BJ,CADJ,CAtBJ,CADJ,CADJ,CADJ,CADJ,CA5KJ,CADJ;AA+OH;;AAlWoC;;AAoWrC,eAAeM,aAAf","sourcesContent":["import React, { Component } from 'react';\nimport Axios from 'axios';\nimport {Container,Row,Col,Table,Form, Card} from 'react-bootstrap';\nimport NumberFormat from 'react-number-format';\nimport { AreaChart, XAxis,YAxis, CartesianGrid,Tooltip,Legend, Area} from 'recharts';\nimport ReactGA from 'react-ga';\nimport Loader from 'react-loader-spinner';\n\nconst colors = {\n    confirmed: '#FFD31D',\n    recovered: '#21BF72',\n    deaths: '#DD2C00',\n  };\nconst showChartPeriod=[\n    {\n        period:7,\n        periodTitle:\"Last 7 Days\"\n    },\n    {\n        period:14,\n        periodTitle:\"Last 14 Days\"\n    },\n    {\n        period:30,\n        periodTitle:\"Last 30 Days\"\n    },\n    {\n        period:0,\n        periodTitle:\"All Data\"\n    }\n]\n\nclass DataChartOnly extends Component{\n    constructor (props){\n        super(props);\n        this.getData=this.getData.bind(this);\n        this.getCountry=this.getCountry.bind(this);\n      }\n      \n      state={\n        currentData:[],\n        currentPage:1,\n        dataPerPage:7,\n        selectedCountry:\"China\",\n        population:0,\n        temp:[],\n        countries:[],\n        tableCountries:[],\n        chartPeriod:7,\n        width:\n        window.innerWidth ||\n        document.documentElement.clientWidth ||\n        document.body.clientWidth\n      }\n      componentDidMount(){\n        \n        ReactGA.initialize('UA-163115935-1');\n        ReactGA.pageview('/Data-Visualization');\n\n        this.getCountryByIP();\n        window.addEventListener('resize',this.updateDimensions);\n      }\n      updateDimensions = ()=>{\n          const width = \n          window.innerWidth ||\n          document.documentElement.clientWidth ||\n          document.body.clientWidth;\n\n          this.setState({width});\n      }\n      async getCountryByIP(){\n          const res=await Axios.get(\"https://ipapi.co/json\");\n          \n          this.setState({\n              selectedCountry:res.data.country_name ===\"United States\" ? \"US\" : res.data.country_name,\n              population:res.data.country_population \n          })\n          this.getData();\n      }\n      async getData(){\n        const selectedCountry=this.state.selectedCountry;\n        const res=await Axios.get(\"https://pomber.github.io/covid19/timeseries.json\");\n        \n        const byConfirmed=res.data[selectedCountry];\n        byConfirmed.sort(function(a,b){\n            return a.confirmed - b.confirmed;\n        });\n        \n        const indexOfLastData =res.data[selectedCountry].length; \n        const indexOfFirstData=indexOfLastData - this.state.chartPeriod;\n        //console.log(indexOfLastData);\n        this.setState({\n          countries:res.data[selectedCountry].slice(indexOfFirstData,indexOfLastData),\n          tableCountries:byConfirmed,\n          temp:Object.keys(res.data)\n        })\n      }\n      async getCountry(event){\n        event.persist();\n        const countryRes=await Axios.get(\"https://pomber.github.io/covid19/timeseries.json\");\n        const searchCountry=event.target.value;\n        \n        const byConfirmed=countryRes.data[searchCountry].slice(0);\n        byConfirmed.sort(function(a,b){\n            return b.confirmed - a.confirmed;\n        });\n\n        const indexOfLastData =countryRes.data[searchCountry].length; \n        const indexOfFirstData=indexOfLastData - this.state.chartPeriod;\n\n        this.setState({\n            selectedCountry:searchCountry,\n            countries:countryRes.data[searchCountry].slice(indexOfFirstData,indexOfLastData),\n            tableCountries:byConfirmed\n        })\n        \n      }\n    \nrender(){\n    const {\n        selectedCountry,\n        population,\n        temp,\n        countries,\n        width\n    } = this.state;\n\n    if(!countries) return (\n        <Container fluid>\n            <Row className=\"justify-content-md-center\">\n                <Col xs=\"12\" lg=\"8\">\n                <Card \n                    className=\"shadow\" \n                    style={{marginBottom:'1rem',paddingTop:'15rem',border:'none',minHeight:\"700px\"}}\n                >\n                    <Loader \n                        type=\"ThreeDots\"\n                        color=\"#DD2C00\"\n                        height={100}\n                        width={100}\n                        timeout={9000000000}\n                    />\n                </Card>     \n                </Col>\n            </Row>\n        </Container>\n    );\n    return(\n        <div className=\"mid\">\n            <Container fluid>\n                <Row className=\"justify-content-md-center\">\n                    <Col xs=\"12\" lg=\"8\">\n                    <Card className=\"shadow-sm\" style={{marginBottom:'1rem',padding:'1rem',border:'none'}}>\n                        <Form.Control as=\"select\" size=\"sm\" onChange={this.getCountry} custom>\n                                <option>{selectedCountry}</option> \n                                {\n                                temp.map((items,i)=>\n                                <option key={i}>{items}</option>  \n                                )\n                                }\n                            </Form.Control>\n                    </Card>     \n                    </Col>\n                </Row>\n\n                <Row className=\"justify-content-md-center\">\n                    <Col xs=\"12\" lg=\"8\">\n                    <Card className=\"shadow-sm\" style={{marginBottom:'1rem',padding:'1rem',border:'none'}}>\n                        <Form.Control as=\"select\" size=\"sm\" onChange={this.updateChartPeriod} custom>\n                                <option>Select Chart Period</option> \n                                {\n                                showChartPeriod.map((items,period)=>\n                                <option key={items.period}>{items.periodTitle}</option>  \n                                )\n                                }\n                            </Form.Control>\n                    </Card>     \n                    </Col>\n                </Row>\n            </Container>\n            \n            <Container fluid>\n                <Row className=\"justify-content-md-center\">\n                    <Col xs lg=\"8\">\n                        <Card className=\"shadow-sm\" style={{border:'none'}}>\n                            <div style={{marginTop:'1rem'}}>\n                                <h5 style={{textAlign:'center'}}>{selectedCountry}'s Data</h5>\n                            </div>\n                            <AreaChart \n                                width={ width > 980 ? 1200 : width - 80 } \n                                height={300} \n                                data={countries} \n                                margin={{top: 20, right: 20, left: 20, bottom: 20}}\n                                >\n                            <CartesianGrid strokeDasharray=\"1 1\" />\n                            <XAxis dataKey=\"date\" />\n                            <YAxis />\n                            <Tooltip />\n                            <Legend/>\n                            <Area type=\"monotone\"  dataKey=\"confirmed\" dot={false}  stroke={colors.confirmed} fill={colors.confirmed} />\n                            <Area type=\"monotone\" dataKey=\"recovered\" dot={false} stroke={colors.recovered} fill={colors.recovered} />\n                            <Area type=\"monotone\" dataKey=\"deaths\" dot={false}  stroke={colors.deaths} fill={colors.deaths} />\n                            </AreaChart>\n                        </Card>\n                    </Col>\n                </Row>\n            </Container>\n\n            <Container fluid>\n                <Row className=\"justify-content-md-center\">\n                    <Col xs lg=\"8\">\n                        <Card className=\"shadow-sm\" style={{border:'none',marginTop:'1rem'}}>\n                            <Row className=\"justify-content-md-center\">\n                                <Col>\n                                    <AreaChart \n                                        width={\n                                            width > 980\n                                            ? 480\n                                            : width > 720\n                                            ? width / 2 - 80\n                                            : width - 80\n                                        }\n                                        height={250} \n                                        data={countries} \n                                        margin={{top: 20, right: 20, left: 20, bottom: 20}}\n                                        >\n                                    <CartesianGrid strokeDasharray=\"1 1\" />\n                                    <XAxis dataKey=\"date\" />\n                                    <YAxis />\n                                    <Tooltip />\n                                    <Legend/>\n                                    <Area type=\"monotone\"  dataKey=\"confirmed\" dot={false}  stroke={colors.confirmed} fill={colors.confirmed} />\n                                    </AreaChart>\n                                </Col>\n                                <Col style={{textAlign:'right'}}>\n                                    <div style={{marginTop:'2rem',marginRight:'5rem'}}>\n                                        <p>As of available data</p>\n                                        <h3>\n                                        <NumberFormat \n                                        value={\n                                            countries && \n                                            countries[countries.length-1] &&\n                                            countries[countries.length-1].confirmed\n                                        } \n                                        displayType={'text'} \n                                        thousandSeparator={true}\n                                        style={{color:colors.confirmed}} \n                                        />\n                                        </h3>\n                                        <p>Confirmed cases have been Registered</p>\n                                    </div>\n                                </Col>\n                            </Row>\n                        </Card>\n                    </Col>\n                </Row>\n            </Container>\n            <Container fluid>\n                <Row className=\"justify-content-md-center\">\n                    <Col xs lg=\"8\">\n                        <Card className=\"shadow-sm\" style={{border:'none',marginTop:'1rem'}}>\n                            <Row className=\"justify-content-md-center\">\n                                <Col>\n                                    <AreaChart \n                                        width={\n                                            width > 980\n                                            ? 480\n                                            : width > 720\n                                            ? width / 2 - 80\n                                            : width - 80\n                                        }\n                                        height={250} \n                                        data={countries} \n                                        margin={{top: 20, right: 20, left: 20, bottom: 20}}\n                                        >\n                                    <CartesianGrid strokeDasharray=\"1 1\" />\n                                    <XAxis dataKey=\"date\" />\n                                    <YAxis />\n                                    <Tooltip />\n                                    <Legend/>\n                                    <Area type=\"monotone\" dataKey=\"recovered\" dot={false} stroke={colors.recovered} fill={colors.recovered} />\n                                    </AreaChart>\n                                </Col>\n                                <Col style={{textAlign:'right'}}>\n                                <div style={{marginTop:'2rem',marginRight:'5rem'}}>\n                                        <p>As of available data</p>\n                                        <h3>\n                                        <NumberFormat \n                                        value={\n                                            countries && \n                                            countries[countries.length-1] &&\n                                            countries[countries.length-1].recovered\n                                        } \n                                        displayType={'text'} \n                                        thousandSeparator={true} \n                                        style={{color:colors.recovered}}\n                                        />\n                                        </h3>\n                                        <p>Recovered cases have been Registered with</p>\n                                        <h3>\n                                        <NumberFormat \n                                        value={\n                                            countries && \n                                            countries[0] &&\n                                            Math.round(\n                                                (countries[countries.length-1].recovered / countries[countries.length-1].confirmed) * 100\n                                            )\n                                        } \n                                        displayType={'text'} \n                                        thousandSeparator={true} \n                                        /> %\n                                        </h3>\n                                        <p>Recovery rate</p>\n                                    </div>\n                                </Col>\n                            </Row>\n                        </Card>\n                    </Col>\n                </Row>\n            </Container>\n            <Container fluid>\n                <Row className=\"justify-content-md-center\">\n                    <Col xs lg=\"8\">\n                        <Card className=\"shadow-sm\" style={{border:'none',marginTop:'1rem'}}>\n                            <Row className=\"justify-content-md-center\">\n                                <Col>\n                                    <AreaChart \n                                        width={\n                                            width > 980\n                                            ? 480\n                                            : width > 720\n                                            ? width / 2 - 80\n                                            : width - 80\n                                        }\n                                        height={250} \n                                        data={countries} \n                                        margin={{top: 20, right: 20, left: 20, bottom: 20}}\n                                        >\n                                    <CartesianGrid strokeDasharray=\"1 1\" />\n                                    <XAxis dataKey=\"date\" />\n                                    <YAxis />\n                                    <Tooltip />\n                                    <Legend/>\n                                    <Area type=\"monotone\" dataKey=\"deaths\" dot={false}  stroke={colors.deaths} fill={colors.deaths} />\n                                    </AreaChart>\n                                </Col>\n                                <Col style={{textAlign:'right'}}>\n                                    <div style={{marginTop:'2rem',marginRight:'5rem'}}>\n                                        <p>As of available data</p>\n                                        <h3>\n                                        <NumberFormat \n                                        value={\n                                            countries && \n                                            countries[countries.length-1] &&\n                                            countries[countries.length-1].deaths\n                                        } \n                                        displayType={'text'} \n                                        thousandSeparator={true} \n                                        style={{color:colors.deaths}}\n                                        />\n                                        </h3>\n                                        <p>Death cases have been Registered with</p>\n                                        <h3>\n                                        <NumberFormat \n                                        value={\n                                            countries && \n                                            countries[countries.length-1] &&\n                                            Math.round(\n                                                (countries[countries.length-1].deaths / countries[countries.length-1].confirmed) * 100\n                                            )\n                                        } \n                                        displayType={'text'} \n                                        thousandSeparator={true} \n                                        />% \n                                        </h3>\n                                        <p> Death rate</p>\n                                    </div>\n                                </Col>\n                            </Row>\n                        </Card>\n                    </Col>\n                </Row>\n            </Container>\n            \n        </div>\n    )\n}\n}\nexport default DataChartOnly;"]},"metadata":{},"sourceType":"module"}