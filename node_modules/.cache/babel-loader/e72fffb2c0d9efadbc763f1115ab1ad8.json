{"ast":null,"code":"import _regeneratorRuntime from\"/Users/shariati/Desktop/Projects/demo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/shariati/Desktop/Projects/demo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"/Users/shariati/Desktop/Projects/demo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/shariati/Desktop/Projects/demo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _assertThisInitialized from\"/Users/shariati/Desktop/Projects/demo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";import _createSuper from\"/Users/shariati/Desktop/Projects/demo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import _inherits from\"/Users/shariati/Desktop/Projects/demo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Axios from'axios';import{Container,Row,Col,Table,Form,Card}from'react-bootstrap';import NumberFormat from'react-number-format';import{AreaChart,XAxis,YAxis,CartesianGrid,Tooltip,Legend,Area}from'recharts';var colors={confirmed:'#FFD31D',recovered:'#21BF72',deaths:'#DD2C00'};var DataChartOnly=/*#__PURE__*/function(_Component){_inherits(DataChartOnly,_Component);var _super=_createSuper(DataChartOnly);function DataChartOnly(props){var _this;_classCallCheck(this,DataChartOnly);_this=_super.call(this,props);_this.state={currentData:[],currentPage:1,dataPerPage:7,selectedCountry:\"China\",temp:[],countries:[],tableCountries:[],width:window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth};_this.updateDimensions=function(){var width=window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth;_this.setState({width:width});};_this.getData=_this.getData.bind(_assertThisInitialized(_this));_this.getCountry=_this.getCountry.bind(_assertThisInitialized(_this));return _this;}_createClass(DataChartOnly,[{key:\"componentDidMount\",value:function componentDidMount(){this.getCountryByIP();window.addEventListener('resize',this.updateDimensions);}},{key:\"getCountryByIP\",value:function(){var _getCountryByIP=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var res;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return Axios.get(\"https://ipapi.co/json\");case 2:res=_context.sent;this.setState({selectedCountry:res.data.country_name});this.getData();case 5:case\"end\":return _context.stop();}}},_callee,this);}));function getCountryByIP(){return _getCountryByIP.apply(this,arguments);}return getCountryByIP;}()},{key:\"getData\",value:function(){var _getData=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var selectedCountry,res,byConfirmed;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:selectedCountry=this.state.selectedCountry;_context2.next=3;return Axios.get(\"https://pomber.github.io/covid19/timeseries.json\");case 3:res=_context2.sent;byConfirmed=res.data[selectedCountry];byConfirmed.sort(function(a,b){return a.confirmed-b.confirmed;});this.setState({countries:res.data[selectedCountry],tableCountries:byConfirmed,temp:Object.keys(res.data)});case 7:case\"end\":return _context2.stop();}}},_callee2,this);}));function getData(){return _getData.apply(this,arguments);}return getData;}()},{key:\"getCountry\",value:function(){var _getCountry=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(event){var countryRes,searchCountry,byConfirmed,indexOfLastData,indexOfFirstData;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:event.persist();_context3.next=3;return Axios.get(\"https://pomber.github.io/covid19/timeseries.json\");case 3:countryRes=_context3.sent;searchCountry=event.target.value;byConfirmed=countryRes.data[searchCountry].slice(0);byConfirmed.sort(function(a,b){return b.confirmed-a.confirmed;});this.setState({selectedCountry:searchCountry,countries:countryRes.data[searchCountry],tableCountries:byConfirmed});indexOfLastData=this.state.currentPage*this.state.dataPerPage;indexOfFirstData=indexOfLastData-this.state.dataPerPage;this.setState({currentData:this.state.tableCountries.slice(indexOfFirstData,indexOfLastData)});case 11:case\"end\":return _context3.stop();}}},_callee3,this);}));function getCountry(_x){return _getCountry.apply(this,arguments);}return getCountry;}()},{key:\"render\",value:function render(){var _this$state=this.state,selectedCountry=_this$state.selectedCountry,temp=_this$state.temp,countries=_this$state.countries,width=_this$state.width;return/*#__PURE__*/React.createElement(\"div\",{className:\"mid\"},/*#__PURE__*/React.createElement(Container,{fluid:true},/*#__PURE__*/React.createElement(Row,{className:\"justify-content-md-center\"},/*#__PURE__*/React.createElement(Col,{xs:\"12\",lg:\"8\"},/*#__PURE__*/React.createElement(Card,{className:\"shadow-sm\",style:{marginBottom:'1rem',padding:'1rem',border:'none'}},/*#__PURE__*/React.createElement(Form.Control,{as:\"select\",size:\"sm\",onChange:this.getCountry,custom:true},/*#__PURE__*/React.createElement(\"option\",null,selectedCountry),temp.map(function(items,i){return/*#__PURE__*/React.createElement(\"option\",{key:i},items);})))))),/*#__PURE__*/React.createElement(Container,{fluid:true},/*#__PURE__*/React.createElement(Row,{className:\"justify-content-md-center\"},/*#__PURE__*/React.createElement(Col,{xs:true,lg:\"8\"},/*#__PURE__*/React.createElement(Card,{className:\"shadow-sm\",style:{border:'none'}},/*#__PURE__*/React.createElement(\"div\",{style:{marginTop:'1rem'}},/*#__PURE__*/React.createElement(\"h5\",{style:{textAlign:'center'}},selectedCountry,\"'s Data\")),/*#__PURE__*/React.createElement(AreaChart,{width:width>980?1200:width-80,height:500,data:countries,margin:{top:20,right:20,left:20,bottom:20}},/*#__PURE__*/React.createElement(CartesianGrid,{strokeDasharray:\"1 1\"}),/*#__PURE__*/React.createElement(XAxis,{dataKey:\"date\"}),/*#__PURE__*/React.createElement(YAxis,null),/*#__PURE__*/React.createElement(Tooltip,null),/*#__PURE__*/React.createElement(Legend,null),/*#__PURE__*/React.createElement(Area,{type:\"monotone\",dataKey:\"confirmed\",dot:false,stroke:colors.confirmed,fill:colors.confirmed}),/*#__PURE__*/React.createElement(Area,{type:\"monotone\",dataKey:\"recovered\",dot:false,stroke:colors.recovered,fill:colors.recovered}),/*#__PURE__*/React.createElement(Area,{type:\"monotone\",dataKey:\"deaths\",dot:false,stroke:colors.deaths,fill:colors.deaths})))))),/*#__PURE__*/React.createElement(Container,{fluid:true},/*#__PURE__*/React.createElement(Row,{className:\"justify-content-md-center\"},/*#__PURE__*/React.createElement(Col,{xs:true,lg:\"8\"},/*#__PURE__*/React.createElement(Card,{className:\"shadow-sm\",style:{border:'none',marginTop:'1rem'}},/*#__PURE__*/React.createElement(Row,{className:\"justify-content-md-center\"},/*#__PURE__*/React.createElement(Col,null,/*#__PURE__*/React.createElement(AreaChart,{width:width>980?480:width>720?width/2-40:width-40,height:300,data:countries,margin:{top:20,right:20,left:20,bottom:20}},/*#__PURE__*/React.createElement(CartesianGrid,{strokeDasharray:\"1 1\"}),/*#__PURE__*/React.createElement(XAxis,{dataKey:\"date\"}),/*#__PURE__*/React.createElement(YAxis,null),/*#__PURE__*/React.createElement(Tooltip,null),/*#__PURE__*/React.createElement(Legend,null),/*#__PURE__*/React.createElement(Area,{type:\"monotone\",dataKey:\"confirmed\",dot:false,stroke:colors.confirmed,fill:colors.confirmed}))),/*#__PURE__*/React.createElement(Col,{style:{textAlign:'right'}},/*#__PURE__*/React.createElement(\"div\",{style:{marginTop:'2rem',marginRight:'5rem'}},/*#__PURE__*/React.createElement(\"p\",null,\"As of available data\"),/*#__PURE__*/React.createElement(\"h3\",null,/*#__PURE__*/React.createElement(NumberFormat,{value:countries&&countries[countries.length-1]&&countries[countries.length-1].confirmed,displayType:'text',thousandSeparator:true,style:{color:colors.confirmed}})),/*#__PURE__*/React.createElement(\"p\",null,\"Confirmed cases have been Registered\")))))))),/*#__PURE__*/React.createElement(Container,{fluid:true},/*#__PURE__*/React.createElement(Row,{className:\"justify-content-md-center\"},/*#__PURE__*/React.createElement(Col,{xs:true,lg:\"8\"},/*#__PURE__*/React.createElement(Card,{className:\"shadow-sm\",style:{border:'none',marginTop:'1rem'}},/*#__PURE__*/React.createElement(Row,{className:\"justify-content-md-center\"},/*#__PURE__*/React.createElement(Col,null,/*#__PURE__*/React.createElement(AreaChart,{width:width>980?480:width>720?width/2-40:width-40,height:300,data:countries,margin:{top:20,right:20,left:20,bottom:20}},/*#__PURE__*/React.createElement(CartesianGrid,{strokeDasharray:\"1 1\"}),/*#__PURE__*/React.createElement(XAxis,{dataKey:\"date\"}),/*#__PURE__*/React.createElement(YAxis,null),/*#__PURE__*/React.createElement(Tooltip,null),/*#__PURE__*/React.createElement(Legend,null),/*#__PURE__*/React.createElement(Area,{type:\"monotone\",dataKey:\"recovered\",dot:false,stroke:colors.recovered,fill:colors.recovered}))),/*#__PURE__*/React.createElement(Col,{style:{textAlign:'right'}},/*#__PURE__*/React.createElement(\"div\",{style:{marginTop:'2rem',marginRight:'5rem'}},/*#__PURE__*/React.createElement(\"p\",null,\"As of available data\"),/*#__PURE__*/React.createElement(\"h3\",null,/*#__PURE__*/React.createElement(NumberFormat,{value:countries&&countries[countries.length-1]&&countries[countries.length-1].deaths,displayType:'text',thousandSeparator:true,style:{color:colors.recovered}})),/*#__PURE__*/React.createElement(\"p\",null,\"Recovered cases have been Registered with\"),/*#__PURE__*/React.createElement(\"h3\",null,/*#__PURE__*/React.createElement(NumberFormat,{value:countries&&countries[0]&&Math.round(countries[countries.length-1].recovered/countries[countries.length-1].confirmed*100),displayType:'text',thousandSeparator:true}),\" %\"),/*#__PURE__*/React.createElement(\"p\",null,\"Recovery rate\")))))))),/*#__PURE__*/React.createElement(Container,{fluid:true},/*#__PURE__*/React.createElement(Row,{className:\"justify-content-md-center\"},/*#__PURE__*/React.createElement(Col,{xs:true,lg:\"8\"},/*#__PURE__*/React.createElement(Card,{className:\"shadow-sm\",style:{border:'none',marginTop:'1rem'}},/*#__PURE__*/React.createElement(Row,{className:\"justify-content-md-center\"},/*#__PURE__*/React.createElement(Col,null,/*#__PURE__*/React.createElement(AreaChart,{width:width>980?480:width>720?width/2-40:width-40,height:300,data:countries,margin:{top:20,right:20,left:20,bottom:20}},/*#__PURE__*/React.createElement(CartesianGrid,{strokeDasharray:\"1 1\"}),/*#__PURE__*/React.createElement(XAxis,{dataKey:\"date\"}),/*#__PURE__*/React.createElement(YAxis,null),/*#__PURE__*/React.createElement(Tooltip,null),/*#__PURE__*/React.createElement(Legend,null),/*#__PURE__*/React.createElement(Area,{type:\"monotone\",dataKey:\"deaths\",dot:false,stroke:colors.deaths,fill:colors.deaths}))),/*#__PURE__*/React.createElement(Col,{style:{textAlign:'right'}},/*#__PURE__*/React.createElement(\"div\",{style:{marginTop:'2rem',marginRight:'5rem'}},/*#__PURE__*/React.createElement(\"p\",null,\"As of available data\"),/*#__PURE__*/React.createElement(\"h3\",null,/*#__PURE__*/React.createElement(NumberFormat,{value:countries&&countries[countries.length-1]&&countries[countries.length-1].deaths,displayType:'text',thousandSeparator:true,style:{color:colors.deaths}})),/*#__PURE__*/React.createElement(\"p\",null,\"Death cases have been Registered with\"),/*#__PURE__*/React.createElement(\"h3\",null,/*#__PURE__*/React.createElement(NumberFormat,{value:countries&&countries[countries.length-1]&&Math.round(countries[countries.length-1].deaths/countries[countries.length-1].confirmed*100),displayType:'text',thousandSeparator:true}),\"%\"),/*#__PURE__*/React.createElement(\"p\",null,\" Death rate\")))))))));}}]);return DataChartOnly;}(Component);export default DataChartOnly;","map":{"version":3,"sources":["/Users/shariati/Desktop/Projects/demo/src/components/dataChartOnly.jsx"],"names":["React","Component","Axios","Container","Row","Col","Table","Form","Card","NumberFormat","AreaChart","XAxis","YAxis","CartesianGrid","Tooltip","Legend","Area","colors","confirmed","recovered","deaths","DataChartOnly","props","state","currentData","currentPage","dataPerPage","selectedCountry","temp","countries","tableCountries","width","window","innerWidth","document","documentElement","clientWidth","body","updateDimensions","setState","getData","bind","getCountry","getCountryByIP","addEventListener","get","res","data","country_name","byConfirmed","sort","a","b","Object","keys","event","persist","countryRes","searchCountry","target","value","slice","indexOfLastData","indexOfFirstData","marginBottom","padding","border","map","items","i","marginTop","textAlign","top","right","left","bottom","marginRight","length","color","Math","round"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Axios from 'axios';\nimport {Container,Row,Col,Table,Form, Card} from 'react-bootstrap';\nimport NumberFormat from 'react-number-format';\nimport { AreaChart, XAxis,YAxis, CartesianGrid,Tooltip,Legend, Area} from 'recharts';\n\nconst colors = {\n    confirmed: '#FFD31D',\n    recovered: '#21BF72',\n    deaths: '#DD2C00',\n  };\n\nclass DataChartOnly extends Component{\n    constructor (props){\n        super(props);\n        this.getData=this.getData.bind(this);\n        this.getCountry=this.getCountry.bind(this);\n      }\n      \n      state={\n        currentData:[],\n        currentPage:1,\n        dataPerPage:7,\n        selectedCountry:\"China\",\n        temp:[],\n        countries:[],\n        tableCountries:[],\n        width:\n        window.innerWidth ||\n        document.documentElement.clientWidth ||\n        document.body.clientWidth\n      }\n      componentDidMount(){\n        this.getCountryByIP();\n        window.addEventListener('resize',this.updateDimensions);\n      }\n      updateDimensions = ()=>{\n          const width = \n          window.innerWidth ||\n          document.documentElement.clientWidth ||\n          document.body.clientWidth;\n\n          this.setState({width});\n      }\n      async getCountryByIP(){\n          const res=await Axios.get(\"https://ipapi.co/json\");\n          this.setState({\n              selectedCountry:res.data.country_name\n          })\n          this.getData();\n      }\n      async getData(){\n        const selectedCountry=this.state.selectedCountry;\n        const res=await Axios.get(\"https://pomber.github.io/covid19/timeseries.json\");\n        \n        const byConfirmed=res.data[selectedCountry];\n        byConfirmed.sort(function(a,b){\n            return a.confirmed - b.confirmed;\n        });\n\n        this.setState({\n          countries:res.data[selectedCountry],\n          tableCountries:byConfirmed,\n          temp:Object.keys(res.data)\n        })\n      }\n      async getCountry(event){\n        event.persist();\n        const countryRes=await Axios.get(\"https://pomber.github.io/covid19/timeseries.json\");\n        const searchCountry=event.target.value;\n        \n        const byConfirmed=countryRes.data[searchCountry].slice(0);\n        byConfirmed.sort(function(a,b){\n            return b.confirmed - a.confirmed;\n        });\n\n        this.setState({\n            selectedCountry:searchCountry,\n            countries:countryRes.data[searchCountry],\n            tableCountries:byConfirmed\n        })\n        const indexOfLastData=this.state.currentPage * this.state.dataPerPage;\n        const indexOfFirstData=indexOfLastData - this.state.dataPerPage;\n        this.setState({\n            currentData:this.state.tableCountries.slice(indexOfFirstData,indexOfLastData)\n        })\n      }\n    \nrender(){\n    const {\n        selectedCountry,\n        temp,\n        countries,\n        width\n    } = this.state;\n    return(\n        <div className=\"mid\">\n            <Container fluid>\n                <Row className=\"justify-content-md-center\">\n                    <Col xs=\"12\" lg=\"8\">\n                    <Card className=\"shadow-sm\" style={{marginBottom:'1rem',padding:'1rem',border:'none'}}>\n                        <Form.Control as=\"select\" size=\"sm\" onChange={this.getCountry} custom>\n                                <option>{selectedCountry}</option> \n                                {\n                                temp.map((items,i)=>\n                                <option key={i}>{items}</option>  \n                                )\n                                }\n                            </Form.Control>\n                    </Card>     \n                    </Col>\n                </Row>\n            </Container>\n            \n            <Container fluid>\n                <Row className=\"justify-content-md-center\">\n                    <Col xs lg=\"8\">\n                        <Card className=\"shadow-sm\" style={{border:'none'}}>\n                            <div style={{marginTop:'1rem'}}>\n                                <h5 style={{textAlign:'center'}}>{selectedCountry}'s Data</h5>\n                            </div>\n                            <AreaChart \n                                width={ width > 980 ? 1200 : width - 80 } \n                                height={500} \n                                data={countries} \n                                margin={{top: 20, right: 20, left: 20, bottom: 20}}\n                                >\n                            <CartesianGrid strokeDasharray=\"1 1\" />\n                            <XAxis dataKey=\"date\" />\n                            <YAxis />\n                            <Tooltip />\n                            <Legend/>\n                            <Area type=\"monotone\"  dataKey=\"confirmed\" dot={false}  stroke={colors.confirmed} fill={colors.confirmed} />\n                            <Area type=\"monotone\" dataKey=\"recovered\" dot={false} stroke={colors.recovered} fill={colors.recovered} />\n                            <Area type=\"monotone\" dataKey=\"deaths\" dot={false}  stroke={colors.deaths} fill={colors.deaths} />\n                            </AreaChart>\n                        </Card>\n                    </Col>\n                </Row>\n            </Container>\n\n            <Container fluid>\n                <Row className=\"justify-content-md-center\">\n                    <Col xs lg=\"8\">\n                        <Card className=\"shadow-sm\" style={{border:'none',marginTop:'1rem'}}>\n                            <Row className=\"justify-content-md-center\">\n                                <Col>\n                                    <AreaChart \n                                        width={\n                                            width > 980\n                                            ? 480\n                                            : width > 720\n                                            ? width / 2 - 40\n                                            : width - 40\n                                        }\n                                        height={300} \n                                        data={countries} \n                                        margin={{top: 20, right: 20, left: 20, bottom: 20}}\n                                        >\n                                    <CartesianGrid strokeDasharray=\"1 1\" />\n                                    <XAxis dataKey=\"date\" />\n                                    <YAxis />\n                                    <Tooltip />\n                                    <Legend/>\n                                    <Area type=\"monotone\"  dataKey=\"confirmed\" dot={false}  stroke={colors.confirmed} fill={colors.confirmed} />\n                                    </AreaChart>\n                                </Col>\n                                <Col style={{textAlign:'right'}}>\n                                    <div style={{marginTop:'2rem',marginRight:'5rem'}}>\n                                        <p>As of available data</p>\n                                        <h3>\n                                        <NumberFormat \n                                        value={\n                                            countries && \n                                            countries[countries.length-1] &&\n                                            countries[countries.length-1].confirmed\n                                        } \n                                        displayType={'text'} \n                                        thousandSeparator={true}\n                                        style={{color:colors.confirmed}} \n                                        />\n                                        </h3>\n                                        <p>Confirmed cases have been Registered</p>\n                                    </div>\n                                </Col>\n                            </Row>\n                        </Card>\n                    </Col>\n                </Row>\n            </Container>\n            <Container fluid>\n                <Row className=\"justify-content-md-center\">\n                    <Col xs lg=\"8\">\n                        <Card className=\"shadow-sm\" style={{border:'none',marginTop:'1rem'}}>\n                            <Row className=\"justify-content-md-center\">\n                                <Col>\n                                    <AreaChart \n                                        width={\n                                            width > 980\n                                            ? 480\n                                            : width > 720\n                                            ? width / 2 - 40\n                                            : width - 40\n                                        }\n                                        height={300} \n                                        data={countries} \n                                        margin={{top: 20, right: 20, left: 20, bottom: 20}}\n                                        >\n                                    <CartesianGrid strokeDasharray=\"1 1\" />\n                                    <XAxis dataKey=\"date\" />\n                                    <YAxis />\n                                    <Tooltip />\n                                    <Legend/>\n                                    <Area type=\"monotone\" dataKey=\"recovered\" dot={false} stroke={colors.recovered} fill={colors.recovered} />\n                                    </AreaChart>\n                                </Col>\n                                <Col style={{textAlign:'right'}}>\n                                <div style={{marginTop:'2rem',marginRight:'5rem'}}>\n                                        <p>As of available data</p>\n                                        <h3>\n                                        <NumberFormat \n                                        value={\n                                            countries && \n                                            countries[countries.length-1] &&\n                                            countries[countries.length-1].deaths\n                                        } \n                                        displayType={'text'} \n                                        thousandSeparator={true} \n                                        style={{color:colors.recovered}}\n                                        />\n                                        </h3>\n                                        <p>Recovered cases have been Registered with</p>\n                                        <h3>\n                                        <NumberFormat \n                                        value={\n                                            countries && \n                                            countries[0] &&\n                                            Math.round(\n                                                (countries[countries.length-1].recovered / countries[countries.length-1].confirmed) * 100\n                                            )\n                                        } \n                                        displayType={'text'} \n                                        thousandSeparator={true} \n                                        /> %\n                                        </h3>\n                                        <p>Recovery rate</p>\n                                    </div>\n                                </Col>\n                            </Row>\n                        </Card>\n                    </Col>\n                </Row>\n            </Container>\n            <Container fluid>\n                <Row className=\"justify-content-md-center\">\n                    <Col xs lg=\"8\">\n                        <Card className=\"shadow-sm\" style={{border:'none',marginTop:'1rem'}}>\n                            <Row className=\"justify-content-md-center\">\n                                <Col>\n                                    <AreaChart \n                                        width={\n                                            width > 980\n                                            ? 480\n                                            : width > 720\n                                            ? width / 2 - 40\n                                            : width - 40\n                                        }\n                                        height={300} \n                                        data={countries} \n                                        margin={{top: 20, right: 20, left: 20, bottom: 20}}\n                                        >\n                                    <CartesianGrid strokeDasharray=\"1 1\" />\n                                    <XAxis dataKey=\"date\" />\n                                    <YAxis />\n                                    <Tooltip />\n                                    <Legend/>\n                                    <Area type=\"monotone\" dataKey=\"deaths\" dot={false}  stroke={colors.deaths} fill={colors.deaths} />\n                                    </AreaChart>\n                                </Col>\n                                <Col style={{textAlign:'right'}}>\n                                    <div style={{marginTop:'2rem',marginRight:'5rem'}}>\n                                        <p>As of available data</p>\n                                        <h3>\n                                        <NumberFormat \n                                        value={\n                                            countries && \n                                            countries[countries.length-1] &&\n                                            countries[countries.length-1].deaths\n                                        } \n                                        displayType={'text'} \n                                        thousandSeparator={true} \n                                        style={{color:colors.deaths}}\n                                        />\n                                        </h3>\n                                        <p>Death cases have been Registered with</p>\n                                        <h3>\n                                        <NumberFormat \n                                        value={\n                                            countries && \n                                            countries[countries.length-1] &&\n                                            Math.round(\n                                                (countries[countries.length-1].deaths / countries[countries.length-1].confirmed) * 100\n                                            )\n                                        } \n                                        displayType={'text'} \n                                        thousandSeparator={true} \n                                        />% \n                                        </h3>\n                                        <p> Death rate</p>\n                                    </div>\n                                </Col>\n                            </Row>\n                        </Card>\n                    </Col>\n                </Row>\n            </Container>\n            \n        </div>\n    )\n}\n}\nexport default DataChartOnly;"]},"metadata":{},"sourceType":"module"}